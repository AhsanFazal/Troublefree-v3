/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/articles": {
    /** Get article list */
    get: {
      parameters: {
        query?: {
          /** @description If specified, only articles that have changed since the given date are returned. */
          updated_after?: string;
          /** @description If true, only list articles visible in the webshop */
          webshop_only?: boolean;
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          include?: ("mainArticle" | "customFields")[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new article */
    post: {
      parameters: {
        query?: {
          include?: ("mainArticle" | "customFields")[];
        };
      };
      /** @description Article */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/articles/{article}": {
    /** Update article */
    put: {
      parameters: {
        query?: {
          include?: ("mainArticle" | "customFields")[];
        };
        path: {
          /** @description Article id */
          article: number;
        };
      };
      /** @description Article */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Article"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete article */
    delete: {
      parameters: {
        path: {
          /** @description Article id */
          article: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/article_groups": {
    /** Get article group list */
    get: {
      parameters: {
        query?: {
          /** @description If true, soft deleted article groups will be included */
          include_hidden?: boolean;
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article group(s).
           */
          include?: "customFields"[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new article group */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article group(s).
           */
          include?: "customFields"[];
        };
      };
      /** @description Article group */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleGroup"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/article_groups/{article_group}": {
    /** Get specific article group */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article group(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Article group ID */
          article_group: number;
        };
      };
      responses: {
        /** @description Article group */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleGroup"];
          };
        };
        /** @description Entity Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update article group */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article group(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Article group ID */
          article_group: number;
        };
      };
      /** @description Article group */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete article group */
    delete: {
      parameters: {
        path: {
          /** @description Article group ID */
          article_group: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/article_groups/batch": {
    /** Store new batch article groups */
    post: {
      /** @description Article group */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Store new batch article groups */
            data?: components["schemas"]["ArticleGroup"][];
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/article_main_groups": {
    /** Get list of article main groups */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article main group(s).
           */
          include?: "customFields"[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new article main group */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article main group(s).
           */
          include?: "customFields"[];
        };
      };
      /** @description Article main group */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleMainGroup"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/article_main_groups/{article_main_group}": {
    /** Get specific article main group */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article main group(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Article main group ID */
          article_main_group: number;
        };
      };
      responses: {
        /** @description Article main group */
        200: {
          content: {
            "application/json": components["schemas"]["ArticleMainGroup"];
          };
        };
        /** @description Entity Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update article main group */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the article main group(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Article main group ID */
          article_main_group: number;
        };
      };
      /** @description Article main group */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ArticleMainGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete article main group */
    delete: {
      parameters: {
        path: {
          /** @description Article main group ID */
          article_main_group: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/article_main_groups/batch": {
    /** Store new batch article main groups */
    post: {
      /** @description Article main group */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Store new batch article main groups */
            data?: components["schemas"]["ArticleMainGroup"][];
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/articles/{article}/translations/{field}": {
    /** Get one or more article field translations */
    get: {
      parameters: {
        query?: {
          /** @description Language id or language ISO 639-1 code */
          language?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Set or update an article field translation */
    post: {
      /** @description Translation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Translation"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
        /** @description CREATED */
        201: {
          content: {
          };
        };
      };
    };
    /**
     * Delete one or all translations for a field
     * @description When no language is supplied, all translations for the field will be removed.
     */
    delete: {
      parameters: {
        query?: {
          /** @description Language id or language ISO 639-1 code */
          language?: string;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/main_articles": {
    /** Get list of main articles */
    get: {
      parameters: {
        query?: {
          /** @description If true, soft deleted main articles will be included */
          include_hidden?: boolean;
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the main article(s).
           */
          include?: "customFields"[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new main article */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the main article(s).
           */
          include?: "customFields"[];
        };
      };
      /** @description Main article */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["MainArticle"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/main_articles/{main_article}": {
    /** Get specific main article */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the main article(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Main article ID */
          main_article: number;
        };
      };
      responses: {
        /** @description Article main group */
        200: {
          content: {
            "application/json": components["schemas"]["MainArticle"];
          };
        };
        /** @description Entity Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update main article */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * customFields: Custom fields set for the main article(s).
           */
          include?: "customFields"[];
        };
        path: {
          /** @description Main article ID */
          main_article: number;
        };
      };
      /** @description Main article */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["MainArticle"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete main article */
    delete: {
      parameters: {
        path: {
          /** @description Main article ID */
          main_article: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/main_articles/batch": {
    /** Store new batch main articles */
    post: {
      /** @description Main article */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Store new batch main articles */
            data?: components["schemas"]["MainArticle"][];
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/articles/{article}/stock/warehouses/{warehouse}": {
    /**
     * Get warehouse stock info.
     * @description Gets information for default warehouse if no supplied.
     */
    get: {
      parameters: {
        path: {
          /** @description Article id */
          article: number;
          /** @description Warehouse id */
          warehouse: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["WarehouseStock"];
          };
        };
      };
    };
    /** Update warehouse stock info */
    put: {
      parameters: {
        path: {
          /** @description Article id */
          article: number;
          /** @description Warehouse id */
          warehouse: string;
        };
      };
      /** @description Translation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WarehouseStock"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/articles/stock": {
    /** Update warehouse stock info from batch */
    put: {
      /** @description Translation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WarehouseStock"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/articles/stock/warehouses/{warehouse}": {
    /** Get all stock for given warehouse */
    get: {
      parameters: {
        query?: {
          updatedAfter?: string;
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
        };
        path: {
          /** @description Warehouse id */
          warehouse: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/articles/{article}/stock/warehouses/{warehouse}/mutate": {
    post: {
      parameters: {
        path: {
          /** @description Article id */
          article: number;
          /** @description Warehouse id */
          warehouse: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["StockMutation"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/asset_classes": {
    /** Get asset classes list */
    get: {
      responses: {
        /** @description AssetClass */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store asset class */
    post: {
      /** @description AssetClass */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["AssetClass"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/asset_classes/{asset_class}": {
    /** Update asset class */
    put: {
      parameters: {
        path: {
          /** @description Asset class ID */
          asset_class: number;
        };
      };
      /** @description AssetClass */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["AssetClass"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete asset class */
    delete: {
      parameters: {
        path: {
          /** @description Asset class ID */
          asset_class: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/assets": {
    /** Get assets list */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /** @description Only return assets without a parent asset (default true) */
          onlyRoot?: boolean;
        };
      };
      responses: {
        /** @description Asset */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store asset */
    post: {
      /** @description Asset */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/assets/{asset}": {
    /** Get a specific asset */
    get: {
      parameters: {
        path: {
          /** @description Asset ID */
          asset: number;
        };
      };
      responses: {
        /** @description Asset */
        200: {
          content: {
            "application/json": components["schemas"]["Asset"];
          };
        };
        /** @description Entity Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update asset */
    put: {
      parameters: {
        path: {
          /** @description Asset ID */
          asset: number;
        };
      };
      /** @description Asset */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete asset */
    delete: {
      parameters: {
        path: {
          /** @description Asset ID */
          asset: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/assets/external/{sourceRelation}/{externalId}": {
    post: {
      parameters: {
        path: {
          sourceRelation: number;
          externalId: string;
        };
      };
      /** @description Asset */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/asset_custom_fields": {
    /** Get asset custom field list */
    get: {
      responses: {
        /** @description AssetCustomField */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/choicelists/{choicelist}": {
    /** Get custom attribute choicelist */
    get: {
      parameters: {
        path: {
          /** @description Attribute choicelist id */
          choicelist: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CustomAttributeChoice"][];
          };
        };
      };
    };
  };
  "/documents/{document}/mail": {
    /**
     * Mail a document
     * @description Mail a document / attachment to a recipient. This call will use the default contact e-mail address of the relation from
     * the document unless a contact person id or to e-mail address is supplied.
     *
     * The id of the document can be found in the "data_documenten" table or will be returned from other api calls.
     */
    post: {
      parameters: {
        path: {
          /** @description The stored document id */
          document: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /**
             * @description When set uses contactperson e-mail address as receivers to address.
             *     Not allowed in combination with 'to'.
             */
            contactperson?: number;
            /**
             * @description Recipient e-mail address(es).
             *     Name can be added using 'First Lastname &lt;mail@test.com&gt;'.
             *     Not allowed in combination with 'contactperson'.
             */
            to?: string[];
            /** @description CC e-mail address(es) */
            cc?: string[];
            /** @description BCC e-mail address(es) */
            bcc?: string[];
            /** @description E-mail subject */
            subject?: string;
            /** @description E-mail html body content */
            body?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/files/{file}/download": {
    /**
     * Download the specified file.
     * @description This route supports the standard If-Modified-Since and If-None-Match HTTP headers to avoid retrieving
     * unchanged data.
     */
    get: {
      parameters: {
        query?: {
          /** @description Sets the Content-Disposition HTTP header to 'inline' (true; a browser will try to render the file) or 'attachment' (default, false; a browser will offer the file as a download) */
          inline?: boolean;
        };
        path: {
          /** @description The ID of the file to download. */
          file: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/files/upload": {
    /** Upload a file */
    post: {
      requestBody: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description Uploaded file
             */
            file: string;
          };
        };
      };
      responses: {
        /**
         * @description OK -- the file was recognised as a duplicate of an existing file, and no new file has been
         *     created. The response includes data for that existing file
         */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Created -- the file has been uploaded, and the response includes data on the uploaded file */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/invoices": {
    /** Get invoice list */
    get: {
      parameters: {
        query?: {
          /** @description If specified, only invoices by given order id will be shown. */
          orderId?: string;
          /** @description If specified, only invoices by given debtor will be shown. */
          debtor?: number;
          /**
           * @description available include:
           *      *              lines: Invoice lines per invoice shown.
           *      *              debtor: Shows debtor relation information.
           *      *              paymentCondition: Shows payment condition information.
           */
          include?: ("lines" | "debtor" | "paymentCondition")[];
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/knowledge_base/explanations": {
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available Includes:
           *  * author: The author of the explanation.
           *  * menuItem: The explanation is part of a menu item.
           *  * menuItem.product: The product the menu item belongs to.
           *  * children: The explanation children.
           */
          include?: ("author" | "menuItem" | "menuItem.product" | "children")[];
          /** @description Only lists explanations where the given string matches with the title or description(s) */
          search?: string;
          /** @description Only lists explanations which are part of the given Troublefree product id */
          product?: number;
          /** @description Only lists explanations which are part of the given menuItem id */
          menuItem?: number;
          /** @description Order the list by creation date */
          newestFirst?: boolean;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * author: The author of the explanation.
           *  * menuItem: The explanation is part of a menu item.
           *  * menuItem.product: The product the menu item belongs to.
           *  * children: The explanation children.
           */
          include?: ("author" | "menuItem" | "menuItem.product" | "children")[];
        };
      };
      /** @description Knowledge explanation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeExplanation"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/knowledge_base/explanations/{explanation}": {
    get: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * author: The author of the explanation.
           *  * menuItem: The explanation is part of a menu item.
           *  * menuItem.product: The product the menu item belongs to.
           *  * children: The explanation children.
           */
          include?: ("author" | "menuItem" | "menuItem.product" | "children")[];
          /** @description Skip intern explanations */
          skipIntern?: boolean;
        };
        path: {
          /** @description Knowledge explanation id */
          explanation: number;
        };
      };
      responses: {
        /** @description Knowledge Explanation */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * author: The author of the explanation.
           *  * menuItem: The explanation is part of a menu item.
           *  * menuItem.product: The product the menu item belongs to.
           *  * children: The explanation children.
           */
          include?: ("author" | "menuItem" | "menuItem.product" | "children")[];
        };
        path: {
          /** @description Knowledge explanation id */
          explanation: number;
        };
      };
      /** @description Knowledge explanation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeExplanation"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** @description Knowledge explanation id */
          explanation: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/knowledge_base/menuItems": {
    get: {
      parameters: {
        query?: {
          /** @description Only lists menu items which are part of the given Troublefree product id */
          product?: number;
          /**
           * @description Available Includes:
           *  * product: The product the menu item belongs to.
           *  * parentMenuItem: The parent menu item of the menu item.
           *  * childMenuItems: The children of the menu item.
           *  * explanation: The explanation linked to this menu item.
           */
          include?: ("product" | "parentMenuItem" | "childMenuItems" | "explanation" | "explanation.children")[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * product: The product the menu item belongs to.
           *  * parentMenuItem: The parent menu item of the menu item.
           *  * childMenuItems: The children of the menu item.
           *  * explanation: The explanation linked to this menu item.
           */
          include?: ("product" | "parentMenuItem" | "childMenuItems" | "explanation" | "explanation.children")[];
        };
      };
      /** @description Knowledge menu item */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeMenuItem"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/knowledge_base/menuItems/{menuItem}": {
    get: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * product: The product the menu item belongs to.
           *  * parentMenuItem: The parent menu item of the menu item.
           *  * childMenuItems: The children of the menu item.
           *  * explanation: The explanation linked to this menu item.
           */
          include?: ("product" | "parentMenuItem" | "childMenuItems" | "explanation" | "explanation.children")[];
        };
        path: {
          /** @description Knowledge menu item id */
          menuItem: number;
        };
      };
      responses: {
        /** @description Knowledge menu item */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * product: The product the menu item belongs to.
           *  * parentMenuItem: The parent menu item of the menu item.
           *  * childMenuItems: The children of the menu item.
           *  * explanation: The explanation linked to this menu item.
           */
          include?: ("product" | "parentMenuItem" | "childMenuItems" | "explanation" | "explanation.children")[];
        };
        path: {
          /** @description Knowledge menu item id */
          menuItem: number;
        };
      };
      /** @description Knowledge menu item */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeMenuItem"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/knowledge_base/products": {
    get: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * contactPerson: The contact person for the product.
           */
          include?: "contactPerson"[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * contactPerson: The contact person for the product.
           */
          include?: "contactPerson"[];
        };
      };
      /** @description Knowledge product */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeTroublefreeProduct"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/knowledge_base/products/{product}": {
    put: {
      parameters: {
        query?: {
          /**
           * @description Available Includes:
           *  * contactPerson: The contact person for the product.
           */
          include?: "contactPerson"[];
        };
        path: {
          /** @description Knowledge product id */
          product: number;
        };
      };
      /** @description Knowledge product */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["KnowledgeTroublefreeProduct"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/layouts/{type}/{document}": {
    /** Download a pdf layout for a document */
    get: {
      parameters: {
        path: {
          /**
           * @description Layout id, layout type or print series name, can also use documenttypes:
           *  * incassomachtiging
           *  * offerte
           *  * relatie
           *  * voorraadbeheer
           *  * factuur
           *  * pakbon
           *  * order
           *  * abonnement
           *  * factuur_herinnering
           *  * factuur_herinnering2
           *  * factuur_incasso
           *  * klaarzetbon
           *  * inkoop_pakbon
           */
          type: string;
          /** @description The id of the document of {type} */
          document: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/pdf": string;
          };
        };
      };
    };
  };
  "/layouts/{type}/{document}/print": {
    post: {
      parameters: {
        path: {
          /**
           * @description Layout id, layout type or print series name, can also use documenttypes:
           *  * incassomachtiging
           *  * offerte
           *  * relatie
           *  * voorraadbeheer
           *  * factuur
           *  * pakbon
           *  * order
           *  * abonnement
           *  * factuur_herinnering
           *  * factuur_herinnering2
           *  * factuur_incasso
           *  * klaarzetbon
           *  * inkoop_pakbon
           */
          type: string;
          /** @description The id of the document of {type} */
          document: number;
        };
      };
      /** @description Print layout data */
      requestBody?: {
        content: {
          "application/json": {
            printer?: string;
            relation?: number;
            contact?: number;
            numCopies?: number;
          };
        };
      };
      responses: {
        204: {
          content: {
          };
        };
      };
    };
  };
  "/offers": {
    /**
     * Fetches a list of offers.
     * @description Most of the offer fields defined in the response can also be used as GET parameters to filter the list.
     * For instance, add '?debtor=123' to only return offers for the relation with ID '123'.
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description If true, return only offers with statuses that are considered 'final' (i.e. statuses that
           *  do not lead to other statuses). If false, return only offers with statuses that are NOT considered 'final'.
           */
          status_final?: boolean;
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * employee: Additional information about the employee that created the order.
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * lines: The lines of the offer, containing quantities, articles, descriptions, etc.
           */
          include?: ("customFields" | "debtor" | "employee" | "lines" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
        };
      };
      responses: {
        /** @description Offer */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store single offer. */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * employee: Additional information about the employee that created the order.
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * lines: The lines of the offer, containing quantities, articles, descriptions, etc.
           */
          include?: ("customFields" | "debtor" | "employee" | "lines" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
        };
      };
      /** @description Offer data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Offer"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/offers/{offer}": {
    /** Get single offer. */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * employee: Additional information about the employee that created the order.
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * lines: The lines of the offer, containing quantities, articles, descriptions, etc.
           */
          include?: ("customFields" | "debtor" | "employee" | "lines" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
        };
        path: {
          /** @description Offer id */
          offer: number;
        };
      };
      responses: {
        /** @description Offer */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update single offer. */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * employee: Additional information about the employee that created the order.
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * lines: The lines of the offer, containing quantities, articles, descriptions, etc.
           */
          include?: ("customFields" | "debtor" | "employee" | "lines" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
        };
        path: {
          /** @description Offer id */
          offer: number;
        };
      };
      /** @description Offer data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Offer"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/offers/{offer}/approve": {
    /** Create an order from an offer, and mark the offer as 'approved'. */
    post: {
      parameters: {
        query?: {
          /** @description The date of delivery (YYYY-MM-DD) to set on the order to create */
          orderDeliveryAt?: string;
          /** @description The ID of the location to set on the order to create */
          orderLocation?: number;
        };
        path: {
          /** @description Offer id */
          offer: number;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description Signature image file upload
             */
            signature: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders": {
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
          /** @description Used to sort the order list, the key is the field to sort by and the value is the direction e.g. orderby[id]=ASC */
          orderby?: string;
          /** @description Only lists orders where the given string matches with the reference, addressName (attentionOf), street, city or postcode */
          search?: string;
          /** @description Filter orders on special criteria */
          status?: "not_completed" | "not_delivered" | "not_invoiced" | "completed" | "ready_for_delivery" | "delivered_invoiced_locked" | "partially_delivered" | "not_invoiced_and_not_delivered" | "not_reserved" | "delivered" | "reserved" | "reserved_deliver_locked" | "invoiced" | "invoice_locked" | "no_receipt_not_delivered" | "paid_not_completed" | "paid_not_delivered" | "in_shipment";
          /** @description Only select orders without external link to a source Relation. Use '*' to exclude all sources */
          withoutSourceFor?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new order */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
        };
      };
      /** @description Order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders/{order}": {
    /** Get single order */
    get: {
      parameters: {
        query?: {
          /**
           * @description Default includes:
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           *
           * Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "employee" | "project" | "invoicingCondition" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
        };
        path: {
          /** @description Order id */
          order: number;
        };
      };
      responses: {
        /** @description Order */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update order */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
        };
        path: {
          /** @description Order id */
          order: number;
        };
      };
      /** @description Order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete order */
    delete: {
      parameters: {
        path: {
          /** @description Order id */
          order: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/orders/external/{sourceRelation}/{externalId}": {
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this order */
          externalId: string;
        };
      };
      /** @description Order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders/{order}/invoice": {
    /** Invoice order */
    post: {
      parameters: {
        path: {
          /** @description Order id */
          order: number;
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
          };
        };
      };
    };
  };
  "/orders/{order}/payments": {
    /** Store payment for Order */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes for Response:
           *  * order: The order that the payment was made on.
           *  * paymentMethod: Additional information about the payment method used.
           */
          include?: ("order" | "paymentMethod")[];
        };
        path: {
          /** @description Order id */
          order: number;
        };
      };
      /** @description Payment data */
      requestBody?: {
        content: {
          "application/json": {
            /** @description The payment amount that will be added to the order. */
            amount: number;
            /** @description The ID of the payment method used for the payment */
            method: number;
            /** @description The ID of the currency used for the payment. If omitted, the currency configured for the order will be used. */
            currency?: number;
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders/preview": {
    /**
     * A fictive order is created and returned.
     * @description This method is used to get the current order values just as if the order would actually been pushed.
     */
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
           *  * orderSources: The known order sources (identifiers associated with this order in other systems).
           *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the order.
           *  * invoicingCondition: The conditions under which the order can be invoiced.
           *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
           */
          include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
        };
      };
      /** @description Order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders/{order}/deliver": {
    post: {
      parameters: {
        path: {
          /** @description Order id */
          order: number;
        };
      };
      /** @description Order deliver data */
      requestBody: {
        content: {
          "application/json": {
            /** @default false */
            batchDelivery?: boolean;
            packingSlip?: {
              work?: string;
              deliveryMethod?: number;
              pickedUpBy?: string;
              employee?: number;
              completeDelivery?: boolean;
            };
            items?: {
                orderLineId?: number;
                quantity?: string;
                serialNumbers?: string[];
              }[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/orders/external/{sourceRelation}/{externalId}/deliver": {
    post: {
      parameters: {
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      /** @description Order deliver data */
      requestBody: {
        content: {
          "application/json": {
            packingSlip?: {
              work?: string;
              deliveryMethod?: number;
              pickedUpBy?: string;
              employee?: number;
              externalId?: string;
              completeDelivery?: boolean;
            };
            items?: {
                orderLineExternalId?: string;
                quantity?: string;
                serialNumbers?: string[];
              }[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/packing_slips": {
    /** List packing slips */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /** @description If specified, only packing slips with the given debtor are returned. */
          debtor?: number;
          /** @description If specified, only packing slips with the given date are returned (yyyy-mm-dd). */
          date?: string;
          /** @description If true, sort the packing slips from lowest id. */
          lowestIdFirst?: boolean;
          /**
           * @description Available includes:
           *  * debtor: Additional information about the debtor of the packing slip, such as company name, VAT code and contact persons.
           *  * employee: Additional information about the employee that created the packing slip.
           *  * lines: The lines of the packing slip, containing quantities, order lines, unites, etc.
           */
          include?: ("debtor" | "employee" | "lines.orderLine" | "order")[];
        };
      };
      responses: {
        /** @description PackingSlip */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/projects": {
    /** List projects */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /** @description Available includes */
          include?: ("attachments" | "contactPerson" | "customFields" | "events" | "labels" | "mainTask" | "orders" | "parentTicket" | "primaryLabel" | "relation" | "tasks" | "customFieldTypes")[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Create project */
    post: {
      parameters: {
        query?: {
          /** @description Available includes */
          include?: ("attachments" | "contactPerson" | "customFields" | "events" | "labels" | "mainTask" | "orders" | "parentTicket" | "primaryLabel" | "relation" | "tasks" | "customFieldTypes")[];
        };
      };
      /** @description Project */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/projects/{project}": {
    /** Show project */
    get: {
      parameters: {
        query?: {
          /** @description Available includes */
          include?: ("attachments" | "contactPerson" | "customFields" | "events" | "labels" | "mainTask" | "orders" | "parentTicket" | "primaryLabel" | "relation" | "tasks" | "customFieldTypes")[];
        };
        path: {
          /** @description Project ID */
          project: number;
        };
      };
      responses: {
        /** @description Project */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update project */
    put: {
      parameters: {
        query?: {
          /** @description Available includes */
          include?: ("attachments" | "contactPerson" | "customFields" | "events" | "labels" | "mainTask" | "orders" | "parentTicket" | "primaryLabel" | "relation" | "tasks" | "customFieldTypes")[];
        };
        path: {
          /** @description Project ID */
          project: number;
        };
      };
      /** @description Project */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete project */
    delete: {
      parameters: {
        path: {
          /** @description Project ID */
          project: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/purchase/invoices": {
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
      };
      responses: {
        /** @description PurchaseInvoice */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
      };
      /** @description PurchaseInvoice */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseInvoice"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/invoices/{purchase_invoice}": {
    get: {
      parameters: {
        query?: {
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
        path: {
          /** @description Purchase invoice ID */
          purchase_invoice: number;
        };
      };
      responses: {
        /** @description PurchaseInvoice */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
        path: {
          /** @description Purchase invoice ID */
          purchase_invoice: number;
        };
      };
      /** @description PurchaseInvoice */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseInvoice"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/invoices/external/{sourceRelation}/{externalId}": {
    get: {
      parameters: {
        query?: {
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase invoice */
          externalId: string;
        };
      };
      responses: {
        /** @description PurchaseInvoice */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          include?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase invoice */
          externalId: string;
        };
      };
      /** @description PurchaseInvoice */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseInvoice"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase invoice */
          externalId: string;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/purchase/orders": {
    /** List purchase orders */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
          /** @description Used to sort the list, the key is the field to sort by and the value is the direction e.g. orderby[id]=ASC */
          orderby?: string;
        };
      };
      responses: {
        /** @description PurchaseOrder */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new purchase order */
    post: {
      parameters: {
        query?: {
          /** @description If true, purchased order will be immediately marked as ordered */
          markAsOrdered?: boolean;
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
      };
      /** @description Purchase order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseOrder"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/orders/{purchase_order}": {
    /** Get single purchase order */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Purchase Order id */
          purchase_order: number;
        };
      };
      responses: {
        /** @description PurchaseOrder */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update purchase order */
    put: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Purchase Order id */
          purchase_order: number;
        };
      };
      /** @description Purchase order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseOrder"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete purchase order */
    delete: {
      parameters: {
        path: {
          /** @description Purchase Order id */
          purchase_order: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/purchase/orders/external/{sourceRelation}/{externalId}": {
    /** Get single purchase order by external id */
    get: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      responses: {
        /** @description PurchaseOrder */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update purchase order by external id */
    put: {
      parameters: {
        query?: {
          /** @description If true, purchased order will be immediately marked as ordered */
          markAsOrdered?: boolean;
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      /** @description Purchase order data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseOrder"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Delete purchase order by external id */
    delete: {
      parameters: {
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/purchase/orders/{purchase_order}/order": {
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Purchase Order id */
          purchase_order: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/orders/external/{sourceRelation}/{externalId}/order": {
    post: {
      parameters: {
        query?: {
          /**
           * @description Available includes:
           *  * supplier: The relation that will be fulfilling the purchase order.
           *  * lines: The individual lines on the purchase order.
           */
          include?: ("supplier" | "lines")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/orders/{purchase_order}/receive": {
    /** Receive purchase order */
    post: {
      parameters: {
        path: {
          /** @description Purchase Order id */
          purchase_order: number;
        };
      };
      /** @description Purchase order receive data */
      requestBody: {
        content: {
          "application/json": {
            /** @description Receive purchase order */
            packingSlipNumber?: string;
            /** @description Receive purchase order */
            items?: {
                /** @description Receive purchase order */
                id?: number;
                /** @description Receive purchase order */
                quantity?: string;
              }[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/orders/receive_multiple": {
    /** Receive multiple purchase orders */
    post: {
      /** @description Purchase order receive data */
      requestBody: {
        content: {
          "application/json": {
            /** @description Receive multiple purchase orders */
            packingSlipNumber?: string;
            /** @description Receive multiple purchase orders */
            items?: {
                /** @description Receive multiple purchase orders */
                id?: number;
                /** @description Receive multiple purchase orders */
                quantity?: string;
                /** @description Receive multiple purchase orders */
                purchaseOrder?: string;
              }[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/orders/external/{sourceRelation}/{externalId}/receive": {
    /** Receive purchase order by external id */
    post: {
      parameters: {
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this purchase order */
          externalId: string;
        };
      };
      /** @description Purchase order receive data */
      requestBody: {
        content: {
          "application/json": {
            /** @description Receive purchase order by external id */
            packingSlipNumber?: string;
            /** @description Receive purchase order by external id */
            items?: {
                /** @description Receive purchase order by external id */
                externalId?: number;
                /** @description Receive purchase order by external id */
                quantity?: string;
              }[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/receipts": {
    /** Get purchase receipts */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
        };
      };
      responses: {
        /** @description PurchaseReceipt */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/receipts/{purchase_receipt}/revert": {
    /** Revert a purchase receipt */
    post: {
      parameters: {
        path: {
          /** @description Purchase receipt id */
          purchase_receipt: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        200: {
          content: {
          };
        };
      };
    };
  };
  "/purchase/receipts/{purchase_receipt}/complete": {
    /** Complete a purchase receipt */
    post: {
      parameters: {
        query?: {
          include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
        };
        path: {
          /** @description Purchase receipt id */
          purchase_receipt: number;
        };
      };
      responses: {
        /** @description PurchaseReceipt */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/receipts/{purchase_receipt}/revert_completion": {
    /** Reverse complete a purchase receipt */
    post: {
      parameters: {
        query?: {
          include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
        };
        path: {
          /** @description Purchase receipt id */
          purchase_receipt: number;
        };
      };
      responses: {
        /** @description PurchaseReceipt */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/purchase/receipts/{purchase_receipt}": {
    get: {
      parameters: {
        query?: {
          include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
        };
        path: {
          /** @description Purchase receipt id */
          purchase_receipt: number;
        };
      };
      responses: {
        /** @description PurchaseReceipt */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put: {
      parameters: {
        query?: {
          include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
        };
        path: {
          /** @description Purchase receipt id */
          purchase_receipt: number;
        };
      };
      /** @description Purchase receipt data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["PurchaseReceipt"];
        };
      };
      responses: {
        /** @description PurchaseReceipt */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/addresses": {
    /** Get address list */
    get: {
      parameters: {
        query?: {
          include?: ("country (returns country model as country|null)")[];
        };
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new address */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      /** @description Address */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description ERROR */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/relations/{relation}/addresses/{address}": {
    /** Get address */
    get: {
      parameters: {
        query?: {
          include?: ("country (returns country model as country|null)")[];
        };
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Address id */
          address: number;
        };
      };
      responses: {
        /** @description Addresses */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Update address */
    put: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Address id */
          address: number;
        };
      };
      /** @description Address */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      responses: {
        /** @description ACCEPTED */
        202: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Remove address */
    delete: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Address id */
          address: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations/{relation}/addresses/external/{sourceRelation}/{externalId}": {
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          sourceRelation: number;
          externalId: string;
        };
      };
      /** @description Address */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Address"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description ERROR */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/relations/{relation}/contactpersons": {
    /** Get contact persons list */
    get: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new contact person */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      /** @description Address */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WriteContactPerson"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/contactpersons/{contactperson}": {
    /** Get contact person */
    get: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description ContactPerson id */
          contactperson: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/contactpersons/external/{sourceRelation}/{externalId}": {
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          sourceRelation: number;
          externalId: string;
        };
      };
      /** @description ContactPerson */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["ContactPerson"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description ERROR */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/relations/{relation}/contactperson/{contactperson}": {
    /** Update a contact person */
    put: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description ContactPerson id */
          contactperson: number;
        };
      };
      /** @description ContactPerson */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["WriteContactPerson"];
        };
      };
      responses: {
        /** @description ACCEPTED */
        202: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Remove a contact person */
    delete: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description ContactPerson id */
          contactperson: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations/{relation}/ibans": {
    /** Get Iban list */
    get: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Create new Iban for a Relation */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      /** @description Iban */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Iban"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/ibans/{iban}": {
    /** Update Iban for a relation */
    put: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description IBAN id */
          iban: number;
        };
      };
      /** @description Iban */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Iban"];
        };
      };
      responses: {
        /** @description ACCEPTED */
        202: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Remove Iban for a relation */
    delete: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description IBAN id */
          iban: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations/{relation}/mandates": {
    /** Get all or only available mandates for a relation */
    get: {
      parameters: {
        query?: {
          /** @description If specified, can also show unavailable mandates */
          showUnavailable?: boolean;
        };
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Create direct debit mandate for relation */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /**
             * @description Iban number
             * @example NL29ABNA9996666778
             */
            iban?: string;
            /**
             * @description Mandate type
             * @enum {string}
             */
            type?: "ONE-OFF" | "RECURRENT";
            /**
             * @description Mandate scheme
             * @enum {string}
             */
            scheme?: "CORE" | "B2B";
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/mandates/{mandate}/sign": {
    /** Sign a direct debit mandate */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Direct debit mandate id */
          mandate: number;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description Signature image file upload
             */
            signature: string;
            /** @description Name of Signee */
            signedBy?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/mandates/{mandate}": {
    /** Remove direct debit mandate for a relation */
    delete: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Direct debit mandate id */
          mandate: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations/price_agreements/batch": {
    /** Update existing price agreements in batch */
    put: {
      /** @description PriceAgreement */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Update existing price agreements in batch */
            data?: components["schemas"]["RelationPriceAgreement"][];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store new price agreements in batch */
    post: {
      /** @description PriceAgreement */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Store new price agreements in batch */
            data?: components["schemas"]["RelationPriceAgreement"][];
          };
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Remove existing price agreements in batch */
    delete: {
      /** @description PriceAgreement */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Remove existing price agreements in batch */
            data?: {
                /** @description Remove existing price agreements in batch */
                id?: number;
              }[];
          };
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations/price_agreements": {
    /** Get all price agreements */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/price_agreements/articles": {
    /** Get price agreements */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
        };
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/price_agreements": {
    /** Store new price agreement */
    post: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      /** @description PriceAgreement */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["RelationPriceAgreement"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/price_agreements/{priceAgreement}": {
    /** Remove a price agreement */
    delete: {
      parameters: {
        path: {
          /** @description Price agreement id */
          priceAgreement: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/relations": {
    /** Get relations */
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description available includes:
           *  * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)
           *  * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.
           *  * updated_after: Only show relations that are updated after the given date.
           *  * include_hidden: Include hidden relations (soft deleted).
           *  * deliveryAddress: Show the delivery address of the relation.
           *  * contactAddress: Show the contact address of the relation.
           */
          include?: ("outstandingDeposits" | "status" | "updated_after" | "include_hidden" | "deliveryAddress" | "contactAddress")[];
          /** @description If true, also show deleted relations */
          include_hidden?: boolean;
          updatedAfter?: string;
          /** @description Postcode as part of the address */
          postcode?: string;
          /** @description Housenumber as part of the address */
          number?: string;
        };
      };
      responses: {
        /** @description Relation */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** Store relation */
    post: {
      /** @description Relation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Relation"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}": {
    /** Get specific relation */
    get: {
      parameters: {
        query?: {
          /**
           * @description available includes:
           *  * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)
           *  * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.
           *  * updated_after: Only show relations that are updated after the given date.
           *  * include_hidden: Include hidden relations (soft deleted).
           *  * deliveryAddress: Show the delivery address of the relation.
           *  * contactAddress: Show the contact address of the relation.
           */
          include?: ("outstandingDeposits" | "status" | "updated_after" | "include_hidden" | "deliveryAddress" | "contactAddress")[];
        };
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description Relation */
        200: {
          content: {
            "application/json": components["schemas"]["Relation"];
          };
        };
        /** @description Entity Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update relation */
    put: {
      parameters: {
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      /** @description Relation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Relation"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/external/{sourceRelation}/{externalId}": {
    post: {
      parameters: {
        path: {
          sourceRelation: number;
          externalId: string;
        };
      };
      /** @description Relation */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["Relation"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/portal_auth_check": {
    /** Check a login via a relation. */
    post: {
      /** @description Login credentials */
      requestBody?: {
        content: {
          "application/json": {
            /** @description Check a login via a relation. */
            email?: string;
            /** @description Check a login via a relation. */
            password?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Failed login */
        403: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description Validation errors */
        422: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/source/{sourceRelation}/id/{externalId}": {
    /**
     * Get relation by external source and id
     * Retrieve a relation using the source relation and external id.
     * @description We identify external sources/services using a "source relation" which can be used to identify
     * the link between relations and their external ids.
     */
    get: {
      parameters: {
        path: {
          /** @description Source relation id */
          sourceRelation: number;
          /** @description External id of relation */
          externalId: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/revenue": {
    /** Get total revenue for given Relation */
    get: {
      parameters: {
        query?: {
          /** @description The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation. */
          start_date?: string;
          /** @description The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation. */
          end_date?: string;
          /** @description Whether to include draft orders in the revenue calculation. */
          include_draft_orders?: boolean;
        };
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Article group ID */
          article_group: number;
        };
      };
      responses: {
        /** @description The total revenue for this Relation */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/relations/{relation}/revenue/by_article_group": {
    /** Get total revenue for each article group for a given Relation */
    get: {
      parameters: {
        query?: {
          /** @description The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation. */
          start_date?: string;
          /** @description The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation. */
          end_date?: string;
          /** @description Whether to include draft orders in the revenue calculation. */
          include_draft_orders?: boolean;
        };
        path: {
          /** @description Relation id */
          relation: number;
        };
      };
      responses: {
        /** @description The revenue for this Relation by article group */
        200: {
          content: {
            "application/json": number[];
          };
        };
      };
    };
  };
  "/relations/{relation}/revenue/by_month": {
    /** Get total revenue for each year/month pair for a given Relation */
    get: {
      parameters: {
        query?: {
          /** @description The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation. */
          start_date?: string;
          /** @description The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation. */
          end_date?: string;
          /** @description Whether to include draft orders in the revenue calculation. */
          include_draft_orders?: boolean;
        };
        path: {
          /** @description Relation id */
          relation: number;
          /** @description Article group ID */
          article_group: number;
        };
      };
      responses: {
        /** @description The revenue for this Relation by year/month */
        200: {
          content: {
            "application/json": {
                /** @description Get total revenue for each year/month pair for a given Relation */
                year?: number;
                /** @description Get total revenue for each year/month pair for a given Relation */
                month?: number;
                /** @description Get total revenue for each year/month pair for a given Relation */
                revenue?: number;
              }[];
          };
        };
      };
    };
  };
  "/countries": {
    /** Get countries list */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Country"][];
          };
        };
      };
    };
  };
  "/exceptional_dates": {
    /**
     * Get a list of exceptional dates. Each entry is a datetime interval during which regular business operations
     * may be affected (e.g. a national holiday or vacation period)
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ExceptionalDate"][];
          };
        };
      };
    };
  };
  "/ticketing/schedule_entries": {
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /** @description Available includes */
          include?: ("employee" | "task" | "planningPeriod")[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          /** @description Available includes */
          include?: ("employee" | "task" | "planningPeriod")[];
        };
      };
      /** @description ScheduleEntry */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TicketingScheduleEntry"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/ticketing/schedule_entries/{ticketingScheduleEntry}": {
    put: {
      parameters: {
        query?: {
          /** @description Available includes */
          include?: ("employee" | "task" | "planningPeriod")[];
        };
        path: {
          /** @description Ticketing schedule entry id */
          ticketing_schedule_entry: number;
        };
      };
      /** @description ScheduleEntry */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TicketingScheduleEntry"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** @description Ticketing schedule entry id */
          ticketing_schedule_entry: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/transport/transport_rides": {
    get: {
      parameters: {
        query?: {
          /** @description Which page of results to request; first is 1 */
          page?: number;
          /** @description Number of results to return per page (default 100, min 1, max 1000) */
          per_page?: number;
          /**
           * @description Default includes:
           *  * palletCount
           *  * weight
           *
           * Available includes:
           *  * driver
           *  * items
           *  * vehicle
           */
          include?: ("driver" | "items" | "vehicle")[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    post: {
      parameters: {
        query?: {
          /**
           * @description Default includes:
           *  * palletCount
           *  * weight
           *
           * Available includes:
           *  * driver
           *  * items
           *  * vehicle
           */
          include?: ("driver" | "items" | "vehicle")[];
        };
      };
      /** @description Transport ride data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TransportRide"];
        };
      };
      responses: {
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/transport/transport_rides/external/{sourceRelation}/{externalId}": {
    put: {
      parameters: {
        query?: {
          /**
           * @description Default includes:
           *  * palletCount
           *  * weight
           *
           * Available includes:
           *  * driver
           *  * items
           *  * vehicle
           */
          include?: ("driver" | "items" | "vehicle")[];
        };
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this transport ride */
          externalId: string;
        };
      };
      /** @description Transport ride data */
      requestBody?: {
        content: {
          "application/json": components["schemas"]["TransportRide"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": Record<string, never>;
          };
        };
        /** @description CREATED */
        201: {
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          /** @description Id of the relation used as reference for the external source link */
          sourceRelation: number;
          /** @description External id linked to this transport ride */
          externalId: string;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
  "/transport/transport_rides/{transport_ride}": {
    delete: {
      parameters: {
        path: {
          /** @description Transport ride id */
          transport_ride: number;
        };
      };
      responses: {
        /** @description NO CONTENT */
        204: {
          content: {
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Article: {
      id: number;
      /** @description EAN barcode */
      barCode?: string;
      manufacturerCode?: string;
      code?: string;
      /** @description Id or name of article unit */
      unit?: string;
      extraDescription?: string;
      manufacturer?: number;
      group?: number;
      endOfLife?: boolean;
      /** @description Get objects with info about the article per supplier */
      suppliers?: components["schemas"]["ArticleSupplier"][];
      /** Format: float */
      packageWeight?: number;
      /** Format: float */
      unitPerM2?: number;
      /** Format: float */
      M2PerUnit?: number;
      /** Format: float */
      purchaseQuantityIncrement?: number;
      /** Format: float */
      purchaseQuantityMinimum?: number;
      /** Format: float */
      unitsPerPackage?: number;
      /** Format: float */
      layersPerPackage?: number;
      dimensions?: components["schemas"]["Dimensions"];
      mainArticle?: number;
      surchargeArticle?: number;
      depositArticle?: number;
      customFields?: {
        /** @example fieldValue */
        fieldName?: string;
      };
      /**
       * @description Get the description that should be presented to a buyer.
       * Use custom description when settings is set and custom description is not empty, else use description.
       *
       * Pay attention: using the custom description depends on a global setting and often on context
       */
      description: string;
      /** @description File IDs of images (0 to 4) */
      images?: Record<string, never>;
      /**
       * @description Purchase obligation
       * @enum {string}
       */
      purchaseObligation?: "unit" | "package" | "layer" | "package_mini" | "package_mini_layer";
      salesPrice?: components["schemas"]["Price"];
      resalePrice?: components["schemas"]["Price"];
    };
    ArticleGroup: {
      id: number;
      name: string;
      /** @description The ArticleMainGroup associated with this Article */
      mainGroup?: number;
      /** @description File IDs of images */
      images?: number[];
    };
    ArticleMainGroup: {
      id: number;
      articleGroups: number[];
      name: string;
      /** @description File IDs of images */
      images?: number[];
    };
    ArticleSupplier: {
      id?: number;
      article?: components["schemas"]["Article"];
      supplier?: components["schemas"]["Relation"];
      supplierArticleCode?: string;
      description?: string;
      /** @description The list purchase price for this supplier, before any relevant discounts or other agreements are applied. */
      purchasePriceGross?: string;
      /**
       * @description The discount percentage applied to the purchasePriceGross to obtain the purchasePrice. Stored separately to allow
       * us to maintain e.g. a fixed 10% discount, even when the gross/net prices are rounded and imply a slightly
       * different rate.
       */
      discountRate?: string;
      purchasePrice?: string;
      differentPurchasePrice?: string;
      recommendedRetailPrice?: string;
      /**
       * @description The minimum quantity that must be ordered from this supplier in one purchase order,
       * expressed in terms of the article base unit.
       *
       * TODO: should probably be renamed purchaseQuantityMinimum to match the corresponding Article-level value
       */
      orderQuantity?: string;
      /** @description The step size in allowed order quantities, e.g. for a value of 3, acceptable order quantities are 3, 6, 9, ... */
      purchaseQuantityIncrement?: string;
      unitsPerSupplierPackage?: string;
      preferredSupplier?: boolean;
      obsolete?: boolean;
    };
    MainArticle: {
      id: number;
      group?: number;
      name: string;
      description?: string;
      /** @description File IDs of images */
      images?: number[];
    };
    Asset: {
      id?: number;
      assetClass?: number;
      owner?: number;
      name?: string;
      description?: string;
      /** @description The Asset that this Asset is nested under. */
      parentAsset?: number;
      article?: number;
      /** @description The ContactPerson (within the $owner) that primarily uses this Asset. */
      mainUser?: number;
      /** @description The address (within the $owner) where the Asset is located. */
      address?: number;
      /** @description The room (within the $address) where the asset is located. */
      addressRoom?: number;
      /** @description When the Asset entered (or will enter) into use. */
      commissionedAt?: string;
    };
    AssetClass: {
      id?: number;
      /** @description The name of the asset class. */
      name?: string;
      /** @description An optional default asset name template, used when the asset name is left empty */
      assetNameTemplate?: string;
    };
    AssetCustomField: {
      id?: number;
      name?: string;
      /**
       * @description The internal name that identifies the custom field. Used to e.g. communicate asset custom field values.
       *
       * May only contain ASCII alphanumeric characters, underscores and dashes (/[a-zA-Z0-9_-]+/)
       */
      systemName?: string;
      type?: number;
    };
    CustomAttributeChoice: {
      id?: number;
      /** @description The attribute choice list number: a user-defined number by which the choices are grouped. */
      listNumber?: number;
      /** @description Attribute choice name */
      name?: string;
    };
    Invoice: {
      number?: string;
      reference?: string;
      /** Format: int32 */
      debtor?: number;
      /** Format: date-time */
      issuedAt?: string;
      payed?: boolean;
      /** Format: float */
      paidAmount?: number;
      /** Format: float */
      chargedAmount?: number;
      lines?: components["schemas"]["InvoiceLine"][];
    };
    InvoiceLine: {
      id: number;
      description?: string;
      unitPriceExcl?: Record<string, never>;
      /** Format: float */
      quantity?: number;
      unitText?: string;
      /** Format: float */
      discount?: number;
      isHidden?: boolean;
      headerText?: string;
      headerNumber?: number;
      shouldCondenseHeader?: number;
    };
    KnowledgeExplanation: {
      id?: number;
      title?: string;
      shortDescription?: string;
      longDescription?: string;
      author?: components["schemas"]["Relation"];
      hidden?: boolean;
      children?: components["schemas"]["KnowledgeExplanation"][];
      parents?: components["schemas"]["KnowledgeExplanation"][];
    };
    KnowledgeMenuItem: {
      id?: number;
      menuItemName?: string;
      role?: boolean;
      parentMenuItem?: components["schemas"]["KnowledgeMenuItem"];
      product?: components["schemas"]["KnowledgeTroublefreeProduct"];
    };
    KnowledgeTroublefreeProduct: {
      id?: number;
      productName?: string;
      contactPerson?: components["schemas"]["Relation"];
    };
    Translation: {
      language?: number;
      text?: string;
    };
    DeliveryAddressOffer: {
      attentionOf?: string;
      /** @description The street of the delivery address. May also contain a number, particularly in old purchase orders. */
      street?: string;
      /** @description The street number of the delivery address. For older orders the number might still be set in the street (AfleveringsAdres) column. */
      number?: string;
      postcode?: string;
      district?: string;
      city?: string;
      countryName?: string;
      /**
       * @description Country id
       *
       * Not as relation because Doctrine only supports simple columns in Embeddables
       */
      countryId?: number;
      country?: components["schemas"]["Country"];
      email?: string;
      phone?: string;
      GLN?: string;
    };
    Offer: {
      id?: number;
      debtor?: components["schemas"]["Relation"];
      /** Format: date-time */
      issuedAt?: string;
      reference?: string;
      employee?: components["schemas"]["Relation"];
      daysValid?: number;
      deliveryMethod?: number;
      deliveryAddress?: components["schemas"]["DeliveryAddressOffer"];
      paymentCondition?: number;
      status?: components["schemas"]["OfferStatus"];
      lines?: components["schemas"]["OfferLine"][];
      customFields?: {
        /** @example fieldValue */
        fieldName?: string;
      };
      totalPrice?: components["schemas"]["Price"];
    };
    OfferLine: {
      offer?: number;
      /** Format: float */
      quantity?: number;
      article?: components["schemas"]["Article"];
      description?: string;
      manufacturer?: string;
      /** Format: float */
      price?: number;
      /**
       * Format: float
       * @description The column "Regel_InkoopPrijs" actually contains the costPrice
       */
      costPrice?: number;
    };
    OfferStatus: {
      id?: number;
      description?: string;
      /** @description Either 1 or 0, defines if the current status will change or not (if status is final). */
      final?: boolean;
    };
    DeliveryAddressOrder: {
      attentionOf?: string;
      /** @description The street of the delivery address. May also contain a number, particularly in old purchase orders. */
      street?: string;
      postcode?: string;
      district?: string;
      city?: string;
      countryName?: string;
      /**
       * @description Country id
       *
       * Not as relation because Doctrine only supports simple columns in Embeddables
       */
      countryId?: number;
      country?: components["schemas"]["Country"];
      email?: string;
      phone?: string;
      GLN?: string;
    };
    Order: {
      id: number;
      /**
       * Format: date-time
       * @description Order document date. Created date by default, but can be manually changed.
       */
      issuedAt?: string;
      /**
       * Format: date-time
       * @description Updated at is updated using a lifeCycle callback, not Gedmo extensions because this uses custom type
       */
      updatedAt?: string;
      debtor: components["schemas"]["Relation"];
      invoiceRelation?: components["schemas"]["Relation"];
      reference?: string;
      orderType?: number;
      employee: components["schemas"]["Relation"];
      /** Format: date-time */
      deliveryAt?: string;
      /** Format: date-time */
      deliveryDateUntil?: string;
      deliveryMethod?: number;
      deliveryPreferredTime?: string;
      commentAboveLines?: string;
      commentBelowLines?: string;
      internalComment?: string;
      deliveryAddress?: components["schemas"]["DeliveryAddressOrder"];
      /** @description The delivery status of the order. See *_DELIVERED constants for possible values. */
      delivered?: number;
      invoiced?: number;
      /** @description See self::*_RESERVED constants */
      reserved?: number;
      releaseInvoicingCondition?: number;
      extraComment?: string;
      lines: components["schemas"]["OrderLine"][];
      /**
       * Format: date-time
       * @description Allow invoicing not before date
       */
      invoicingNotBefore?: string;
      /** @description Conditions to allow invoicing */
      invoicingCondition?: number;
      customFields?: {
        /** @example fieldValue */
        fieldName?: string;
      };
      pickingLocation?: string;
    };
    OrderLine: {
      id: number;
      headerNumber?: number;
      headerText?: string;
      sortOrder?: number;
      /** Format: float */
      quantity?: number;
      /** Format: float */
      quantityReserved?: number;
      /** Format: float */
      quantityPicked?: number;
      /** Format: float */
      quantityToDeliver?: number;
      unit?: string;
      article?: components["schemas"]["Article"][];
      description?: string;
      remark?: string;
      /** Format: float */
      price?: number;
    };
    OrderLineSource: {
      sourceRelation?: number;
      externalId?: string;
      orderLine?: number;
    };
    OrderSource: {
      /** @description Relation for which we store the external id */
      order?: number;
      /** @description Relation which acts as the relation source and is linked to an external source */
      sourceRelation?: number;
      /** @description Id of the relation from the external source */
      externalId?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    DeliveryAddressPackingSlip: {
      attentionOf?: string;
      /** @description This field might also (still) contain the street number for packing slips before the addition of `street_number` ($number) */
      street?: string;
      postcode?: string;
      district?: string;
      city?: string;
      countryName?: string;
    };
    PackingSlip: {
      id?: number;
      employee?: components["schemas"]["Relation"];
      lines?: components["schemas"]["PackingSlipLine"][];
    };
    PackingSlipLine: {
      id?: number;
      packingSlip?: components["schemas"]["PackingSlip"];
      orderLine?: components["schemas"]["OrderLine"];
      /** Format: float */
      quantity?: number;
      /** Format: float */
      quantityUndelivered?: number;
    };
    OrderPayment: {
      id?: number;
      order?: components["schemas"]["Order"];
      paymentMethod?: components["schemas"]["PaymentMethod"];
      amount?: number;
      /** Format: date-time */
      date?: string;
    };
    PaymentMethod: {
      id?: number;
      name?: string;
      posDescription?: string;
      openCashDrawer?: boolean;
      location?: Record<string, never>;
    };
    RelationPriceAgreement: {
      id?: number;
      relation?: number;
      agreementType?: string;
      article?: components["schemas"]["Article"];
      conditionQuantity?: number;
      conditionType?: string;
      discountPercentage?: number;
      fixedPrice?: number;
      type?: number;
    };
    Project: {
      id?: number;
      relation?: components["schemas"]["Relation"];
      contactPerson?: components["schemas"]["ContactPerson"];
      name?: string;
      description?: string;
    };
    DeliveryAddress: {
      attentionOf?: string;
      /** @description The street of the delivery address. May also contain a number, particularly in old purchase orders. */
      street?: string;
      /** @description The number part of the delivery address. May not be filled out, particularly in old purchase orders. */
      number?: string;
      district?: string;
      city?: string;
      countryName?: string;
      postcode?: string;
      GLN?: string;
    };
    PurchaseInvoice: {
      id?: number;
      lines?: components["schemas"]["PurchaseInvoiceLine"][];
      supplier?: components["schemas"]["Relation"];
      /** @description Receipt number from the received packing slip */
      packingSlipNumber?: string;
      description?: string;
      reference?: string;
      final?: boolean;
      /** Format: date-time */
      exportedAt?: string;
      /** Format: date-time */
      createdAt?: string;
      invoiceNumber?: string;
      /** Format: date-time */
      invoicedAt?: string;
    };
    PurchaseInvoiceLine: {
      id?: number;
      finalPrice?: string;
      /** Format: date-time */
      receivedAt?: string;
      purchaseInvoice?: components["schemas"]["PurchaseInvoice"];
      originalPurchasePrice?: string;
      quantity?: string;
      vat?: number;
      discount?: string;
      purchasePrice?: string;
      salesPrice?: string;
      /** @description Description of the lot */
      description?: string;
    };
    PurchaseInvoiceLineSource: {
      /** @description Relation which acts as the relation source and is linked to an external source */
      sourceRelation?: number;
      /** @description Id of the relation from the external source */
      externalId?: string;
      purchaseInvoiceLine?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PurchaseInvoiceSource: {
      /** @description Relation which acts as the relation source and is linked to an external source */
      sourceRelation?: number;
      /** @description Id of the relation from the external source */
      externalId?: string;
      purchaseInvoice?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PurchaseOrder: {
      id?: number;
      /**
       * Format: date-time
       * @description The date on which this purchase order was created.
       */
      createdAt?: string;
      /** Format: date-time */
      orderedAt?: string;
      /** Format: date-time */
      deliveryAt?: string;
      reference?: string;
      customer?: components["schemas"]["Relation"];
      deliveryMethod?: number;
      deliveryAddress?: components["schemas"]["DeliveryAddress"];
      supplier?: components["schemas"]["Relation"];
      supplierComment?: string;
      supplierOrderNumber?: string;
      lines?: components["schemas"]["PurchaseOrderLine"][];
      orderLineSortBy?: string;
    };
    PurchaseOrderDeliveryMethod: {
      id?: number;
      /** @description The name for the delivery method that the user sees */
      description?: string;
      /**
       * @description The type of delivery method. These values are used to trigger different behaviour.
       *
       * For example, when selecting a TYPE_PICKUP delivery method, the purchase order address is labeled as a
       * "pickup address", and the address is set to that of the creditor of the purchase order by default.
       */
      type?: number;
    };
    PurchaseOrderLine: {
      id?: number;
      salesOrder?: number;
      unit?: number;
      /**
       * @description The base quantity in the article unit, as stored in the DB. Set to null when there is no DB value or $quantity
       * has been changed.
       */
      baseQuantity?: Record<string, never>;
      /** @description The base quantity in the article unit, as stored in the DB after ordering the order. */
      originalBaseQuantity?: Record<string, never>;
      /** @description Quantity in the article base unit */
      baseQuantityDelivered?: Record<string, never>;
      /** @description Quantity in the article base unit */
      quantityDelivered?: Record<string, never>;
      description?: string;
      comment?: string;
      /** @description Nullable by CleanAssociations, although undesired */
      article?: number;
      articleCode?: string;
    };
    PurchaseOrderLineSource: {
      /** @description Relation which acts as the relation source and is linked to an external source */
      sourceRelation?: number;
      /** @description Id of the relation from the external source */
      externalId?: string;
      purchaseOrderLine?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PurchaseOrderSource: {
      /** @description Relation which acts as the relation source and is linked to an external source */
      sourceRelation?: number;
      /** @description Id of the relation from the external source */
      externalId?: string;
      purchaseOrder?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PurchaseReceipt: {
      id?: number;
      supplier?: components["schemas"]["Relation"];
      lines?: components["schemas"]["PurchaseReceiptLine"][];
      /** @description Receipt number from the received packing slip */
      packingSlipNumber?: string;
      reference?: string;
      /**
       * Format: date-time
       * @description Expected delivery date
       */
      deliveryAt?: string;
      /**
       * Format: date-time
       * @description Actual delivery datetime or moment purchase receipt is completed
       */
      completedAt?: string;
      /** @description Received status of purchase receipt (not / partially / fully received) */
      receivedStatus?: number;
      deliveryMethod?: components["schemas"]["PurchaseOrderDeliveryMethod"];
      deliveryAddress?: components["schemas"]["PurchaseReceiptAddress"];
    };
    PurchaseReceiptAddress: {
      attentionOf?: string;
      /** @description The street of the delivery address. May also contain a number, particularly in old purchase orders. */
      street?: string;
      /** @description The number part of the delivery address. May not be filled out, particularly in old purchase orders. */
      number?: string;
      district?: string;
      city?: string;
      postcode?: string;
      email?: string;
      phone?: string;
    };
    PurchaseReceiptLine: {
      id?: number;
      article?: components["schemas"]["Article"];
      articleBarcode?: string;
      unit?: string;
      /** @description The quantity in the base article unit, as stored in the DB */
      baseQuantity?: string;
    };
    Address: {
      id?: number;
      /** @description Street name */
      street?: string;
      city?: string;
      number?: string;
      postcode?: string;
      district?: string;
      addressName?: string;
      gln?: string;
      /** @description ISO Alpha-2 Country code */
      country?: string;
      /** @description Default contact address */
      isContact?: boolean;
      /** @description Default delivery address */
      isDelivery?: boolean;
    };
    ContactPerson: {
      id?: number;
      relation?: components["schemas"]["Relation"];
      /** @enum {string} */
      gender?: "M" | "V" | "F" | "";
      firstName?: string;
      lastNamePrefix?: string;
      lastName?: string;
      phone?: string;
      phoneMobile?: string;
      phoneWork?: string;
      email?: string;
      /** @description The job position or function */
      position?: string;
    };
    Iban: {
      id?: number;
      relation?: number;
      iban?: string;
      bic?: string;
      default?: boolean;
    };
    Relation: {
      id?: number;
      /**
       * @example M
       * @enum {string}
       */
      gender?: "M" | "V" | "F" | "";
      firstname?: string;
      lastname?: string;
      company?: string;
      /** @description Company name prefix */
      companyPrefix?: string;
      phone?: string;
      phoneMobile?: string;
      phoneWork?: string;
      fax?: string;
      /** @description E-mail, also known as general mail address */
      email?: string;
      initials?: string;
      website?: string;
      vatNumber?: string;
      chamberOfCommerceNumber?: string;
      /**
       * @description A list of types that the relation belongs to.
       *
       * Stored in the database as a comma-separated list in a VARCHAR. Can be queried using FIND_IN_SET, as shown in
       * RelationRepository::findAllOfType
       */
      types?: number[];
      /** @description A bit field containing RelationStatus constants. */
      status?: {
        /**
         * @description A bit field containing RelationStatus constants.
         * @example true
         */
        active?: boolean;
        /**
         * @description A bit field containing RelationStatus constants.
         * @example false
         */
        verified?: boolean;
        /**
         * @description A bit field containing RelationStatus constants.
         * @example false
         */
        defunct?: boolean;
      };
      group?: number;
      /**
       * @description Apply group properties to the relation after changing the group or creating a new relation.
       *      *                   Required when 'group' is supplied.
       */
      applyGroupProperties?: boolean;
      paymentConditions?: components["schemas"]["RelationPaymentCondition"][];
      externalCode?: number;
      customFields?: {
        /** @example fieldValue */
        fieldName?: string;
      };
    };
    RelationPaymentCondition: {
      /** @description Order type id */
      orderType?: number;
      /** @description Payment condition id */
      paymentCondition?: number;
    };
    SepaDirectDebitMandate: {
      id?: number;
      /** Format: int32 */
      relation?: number;
      iban?: components["schemas"]["Iban"];
      signed?: boolean;
      /** Format: date-time */
      firstUseAt?: string;
      indexNumber?: number;
      type?: number;
      /**
       * @description The amount will be applied to the total of all transactions for one mandate in a export.
       * Even if there are transactions for a single mandate on different dates, the mandate will be considered
       * for the sum of those transactions.
       * @example 5000.25
       */
      maximumAmount?: string;
      /**
       * @description Sepa Direct Debit scheme (Core / B2B). Use SEPA_SCHEME_* constants
       * @enum {string}
       */
      scheme?: "CORE" | "B2B";
      reference?: string;
      /** Format: date-time */
      issuedAt?: string;
      /** @description Id of the signed document. Use this id to mail the signed mandate document. */
      signedDocument?: number;
      /** @description id of the signed document file */
      signedFile?: number;
      /**
       * @description name of the document signer
       * @default null
       */
      signedBy?: string;
      confirmed?: boolean;
    };
    Country: {
      id?: number;
      name?: string;
      /** @description Iso Code */
      isoCode?: string;
      /** @description Is country a European Union member */
      euMember?: boolean;
      /** @description Sticky on top in lists */
      sticky?: boolean;
    };
    ExceptionalDate: {
      name?: string;
      /**
       * @description The first datetime that is part of the range
       * @example 2020-12-10T00:00:00
       */
      startsAt?: string;
      /**
       * @description The last datetime that is part of the range
       * @example 2020-12-10T23:59:59
       */
      endsAt?: string;
      noDeliveries?: boolean;
      noProduction?: boolean;
      noWork?: boolean;
    };
    StockMutation: {
      id?: number;
      mutationReason?: components["schemas"]["StockMutationReason"];
      /**
       * Format: float
       * @description mutation number up or down -> can be negative?
       */
      mutationAmount?: number;
      /** Format: float */
      newStock?: number;
      /**
       * Format: float
       * @description total amount ex btw
       */
      totalPrice?: number;
      /** @description The name of the user that is logged-in */
      userName?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      exportedAt?: string;
      /** @description Action in application which results in the mutation, e.g. StockMutation::ACTION_IMPORT */
      action?: string;
      explanation?: string;
    };
    StockMutationReason: {
      id?: number;
      reason?: string;
      isDefault?: boolean;
    };
    WarehouseStock: {
      article?: number;
      warehouse?: number;
      /** Format: float */
      quantity?: number;
      /** Format: float */
      minimum?: number;
      /** Format: float */
      maximum?: number;
    };
    File: {
      /** @description Download link for file. */
      url?: string;
      mimeType?: string;
      id?: number;
      /** @description Parent directory */
      directory?: Record<string, never>;
      name?: string;
    };
    TicketingScheduleEntry: {
      name?: string;
      task?: Record<string, never>;
      /** Format: date-time */
      startsAt?: string;
      /** Format: date-time */
      endsAt?: string;
      employee?: number;
      planningPeriod?: number;
    };
    TransportRide: {
      id?: number;
      driver?: components["schemas"]["Relation"];
      vehicle?: components["schemas"]["TransportVehicle"];
      /** Format: date-time */
      departureDate?: string;
      /** Format: date-time */
      departureTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: number;
      comment?: string;
      items?: components["schemas"]["TransportRideItem"][];
    };
    TransportRideItem: {
      id?: number;
      transportRide?: number;
      order?: number;
      packingSlip?: number;
      sequenceNumber?: number;
    };
    TransportVehicle: {
      id?: number;
      name?: string;
      palletPlaces?: number;
      loadCapacity?: number;
    };
    Vat: {
      /** Format: float */
      percentage?: number;
    };
    WriteContactPerson: components["schemas"]["ContactPerson"] & {
      /** @description Write only field to set password */
      password?: string;
    };
    Dimensions: {
      /** @description Length in centimetres */
      length?: number;
      /** @description Width in centimetres */
      width?: number;
      /** @description Height in centimetres */
      height?: number;
    };
    Error: {
      /**
       * @description Error message
       * @example 422 Unprocessable Entity
       */
      message: string;
      /** @description Error messages per attribute */
      errors?: {
        /** @description Errors per attribute */
        attribute?: string[];
      };
      /**
       * @description Http status code
       * @example 422
       */
      status_code: number;
    };
    /** @description Pagination metadata for the response. */
    response_pagination: {
      /** @description The total number of results */
      total?: number;
      /** @description The number of results per page */
      per_page?: number;
      /** @description The current page number (first is 1) */
      current_page?: number;
      /** @description The total number of pages */
      total_pages?: number;
      links?: {
        /**
         * Format: uri
         * @description The URL to the previous page of results, if there is one
         */
        previous?: string;
        /**
         * Format: uri
         * @description The URL to the next page of results, if there is one
         */
        next?: string;
      };
    };
    Price: {
      /**
       * @description Price excluding Value-Added Tax
       * @example 31.364
       */
      exclVat?: number;
      /**
       * @description Price including Value-Added Tax
       * @example 37.95
       */
      inclVat?: number;
    };
  };
  responses: never;
  parameters: {
    article_include?: ("mainArticle" | "customFields")[];
    /**
     * @description Available includes:
     *  * customFields: Custom fields set for the article group(s).
     */
    article_group_include?: "customFields"[];
    /**
     * @description Available includes:
     *  * customFields: Custom fields set for the article main group(s).
     */
    article_main_group_include?: "customFields"[];
    /**
     * @description Available includes:
     *  * customFields: Custom fields set for the main article(s).
     */
    main_article_include?: "customFields"[];
    /** @description Article id */
    article: number;
    /** @description Language id or language ISO 639-1 code */
    language?: string;
    /** @description Warehouse id */
    warehouse: string;
    /**
     * @description Available Includes:
     *  * author: The author of the explanation.
     *  * menuItem: The explanation is part of a menu item.
     *  * menuItem.product: The product the menu item belongs to.
     *  * children: The explanation children.
     */
    explanation_include?: ("author" | "menuItem" | "menuItem.product" | "children")[];
    /**
     * @description Available Includes:
     *  * product: The product the menu item belongs to.
     *  * parentMenuItem: The parent menu item of the menu item.
     *  * childMenuItems: The children of the menu item.
     *  * explanation: The explanation linked to this menu item.
     */
    menu_item_include?: ("product" | "parentMenuItem" | "childMenuItems" | "explanation" | "explanation.children")[];
    /**
     * @description Available Includes:
     *  * contactPerson: The contact person for the product.
     */
    product_include?: "contactPerson"[];
    /**
     * @description Layout id, layout type or print series name, can also use documenttypes:
     *  * incassomachtiging
     *  * offerte
     *  * relatie
     *  * voorraadbeheer
     *  * factuur
     *  * pakbon
     *  * order
     *  * abonnement
     *  * factuur_herinnering
     *  * factuur_herinnering2
     *  * factuur_incasso
     *  * klaarzetbon
     *  * inkoop_pakbon
     */
    layout_type: string;
    /** @description The id of the document of {type} */
    layout_document: number;
    /**
     * @description Available includes:
     *  * employee: Additional information about the employee that created the order.
     *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
     *  * lines: The lines of the offer, containing quantities, articles, descriptions, etc.
     */
    offer_include?: ("customFields" | "debtor" | "employee" | "lines" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
    /**
     * @description Available includes:
     *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
     *  * orderSources: The known order sources (identifiers associated with this order in other systems).
     *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
     *  * employee: Additional information about the employee that created the order.
     *  * invoicingCondition: The conditions under which the order can be invoiced.
     *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
     */
    order_include?: ("prePaidTotalAmount" | "orderSources" | "debtor" | "employee" | "project" | "invoicingCondition" | "lines")[];
    /**
     * @description Available includes for Response:
     *  * order: The order that the payment was made on.
     *  * paymentMethod: Additional information about the payment method used.
     */
    orderPayment_include?: ("order" | "paymentMethod")[];
    /**
     * @description Default includes:
     *  * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.
     *  * lines: The lines of the order, containing quantities, articles, descriptions, etc.
     *
     * Available includes:
     *  * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).
     *  * orderSources: The known order sources (identifiers associated with this order in other systems).
     *  * employee: Additional information about the employee that created the order.
     *  * invoicingCondition: The conditions under which the order can be invoiced.
     */
    order_get_include?: ("prePaidTotalAmount" | "orderSources" | "employee" | "project" | "invoicingCondition" | "lines.article" | "lines.lineTotal" | "lines.unitPrice")[];
    /**
     * @description Available includes:
     *  * debtor: Additional information about the debtor of the packing slip, such as company name, VAT code and contact persons.
     *  * employee: Additional information about the employee that created the packing slip.
     *  * lines: The lines of the packing slip, containing quantities, order lines, unites, etc.
     */
    packing_slip_include?: ("debtor" | "employee" | "lines.orderLine" | "order")[];
    /** @description Available includes */
    project_include?: ("attachments" | "contactPerson" | "customFields" | "events" | "labels" | "mainTask" | "orders" | "parentTicket" | "primaryLabel" | "relation" | "tasks" | "customFieldTypes")[];
    purchase_invoice_includes?: ("lines" | "lines.receiptLineAssignments" | "lines.suppliers" | "lines.purchaseOrderLines" | "lines.hasAssignments" | "lines.packingSlipNumber" | "suppliers" | "totalPrice" | "purchaseOrders" | "assignments" | "attachments")[];
    /**
     * @description Available includes:
     *  * supplier: The relation that will be fulfilling the purchase order.
     *  * lines: The individual lines on the purchase order.
     */
    purchase_order_include?: ("supplier" | "lines")[];
    purchase_receipt_include?: ("deliveryMethod" | "lines" | "lines.article" | "lines.comment" | "lines.unit" | "lines.warehouse" | "purchaseOrderNumbers" | "supplier")[];
    /** @description IBAN id */
    iban: number;
    /** @description Direct debit mandate id */
    mandate: number;
    /** @description Price agreement id */
    priceAgreement: number;
    /**
     * @description available includes:
     *  * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)
     *  * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.
     *  * updated_after: Only show relations that are updated after the given date.
     *  * include_hidden: Include hidden relations (soft deleted).
     *  * deliveryAddress: Show the delivery address of the relation.
     *  * contactAddress: Show the contact address of the relation.
     */
    relation_include?: ("outstandingDeposits" | "status" | "updated_after" | "include_hidden" | "deliveryAddress" | "contactAddress")[];
    /** @description The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation. */
    start_date?: string;
    /** @description The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation. */
    end_date?: string;
    /** @description Whether to include draft orders in the revenue calculation. */
    include_draft_orders?: boolean;
    /** @description Available includes */
    schedule_entry_include?: ("employee" | "task" | "planningPeriod")[];
    /**
     * @description Default includes:
     *  * palletCount
     *  * weight
     *
     * Available includes:
     *  * driver
     *  * items
     *  * vehicle
     */
    transport_ride_include?: ("driver" | "items" | "vehicle")[];
    /** @description Number of results to return per page (default 100, min 1, max 1000) */
    per_page?: number;
    /** @description Which page of results to request; first is 1 */
    page?: number;
    /** @description Relation id */
    relation: number;
    /** @description ContactPerson id */
    contactperson: number;
    /** @description Address id */
    address: number;
    /** @description Attribute choicelist id */
    choicelist: number;
    /** @description Article group ID */
    article_group: number;
    /** @description Article main group ID */
    article_main_group: number;
    /** @description Main article ID */
    main_article: number;
    /** @description Order id */
    order: number;
    /** @description Project ID */
    project: number;
    /** @description Purchase invoice ID */
    purchase_invoice: number;
    /** @description Purchase Order id */
    purchase_order: number;
    /** @description Purchase receipt id */
    purchase_receipt: number;
    /** @description Asset ID */
    asset: number;
    /** @description Asset class ID */
    asset_class: number;
    /** @description Asset custom field ID */
    asset_custom_field: number;
    /** @description Offer id */
    offer: number;
    /** @description Transport ride id */
    transport_ride: number;
    /** @description Knowledge explanation id */
    explanation: number;
    /** @description Ticketing schedule entry id */
    ticketing_schedule_entry: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
