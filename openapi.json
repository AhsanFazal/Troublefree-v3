{
  "openapi": "3.0.1",
  "info": {
    "title": "Retail API",
    "description": "Retail API.\nAuthentication requires a Basic Authorization Header in combination with a\n           Company Header containing the administration name.",
    "contact": {
      "name": "Troublefree",
      "email": "info@troublefree.nl"
    },
    "license": {
      "name": "commercial"
    },
    "version": "1"
  },
  "servers": [
    {
      "url": "https://retail.troublefree.nl/v3/api"
    }
  ],
  "security": [
    {
      "BasicAuth": [],
      "CompanyKey": []
    }
  ],
  "paths": {
    "/articles": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get article list",
        "parameters": [
          {
            "name": "updated_after",
            "in": "query",
            "description": "If specified, only articles that have changed since the given date are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webshop_only",
            "in": "query",
            "description": "If true, only list articles visible in the webshop",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["mainArticle", "customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Article list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Store new article",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["mainArticle", "customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Article"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/articles/{article}": {
      "put": {
        "tags": ["Articles"],
        "summary": "Update article",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["mainArticle", "customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Article"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete article",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/article_groups": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get article group list",
        "parameters": [
          {
            "name": "include_hidden",
            "in": "query",
            "description": "If true, soft deleted article groups will be included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Article group list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Store new article group",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/article_groups/{article_group}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get specific article group",
        "parameters": [
          {
            "name": "article_group",
            "in": "path",
            "description": "Article group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleGroup"
                }
              }
            }
          },
          "404": {
            "description": "Entity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update article group",
        "parameters": [
          {
            "name": "article_group",
            "in": "path",
            "description": "Article group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete article group",
        "parameters": [
          {
            "name": "article_group",
            "in": "path",
            "description": "Article group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/article_groups/batch": {
      "post": {
        "tags": ["Articles"],
        "summary": "Store new batch article groups",
        "requestBody": {
          "description": "Article group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Store new batch article groups",
                    "items": {
                      "$ref": "#/components/schemas/ArticleGroup"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/article_main_groups": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get list of article main groups",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article main group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Article main group list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Store new article main group",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article main group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article main group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleMainGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/article_main_groups/{article_main_group}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get specific article main group",
        "parameters": [
          {
            "name": "article_main_group",
            "in": "path",
            "description": "Article main group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article main group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article main group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleMainGroup"
                }
              }
            }
          },
          "404": {
            "description": "Entity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update article main group",
        "parameters": [
          {
            "name": "article_main_group",
            "in": "path",
            "description": "Article main group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the article main group(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Article main group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleMainGroup"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete article main group",
        "parameters": [
          {
            "name": "article_main_group",
            "in": "path",
            "description": "Article main group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/article_main_groups/batch": {
      "post": {
        "tags": ["Articles"],
        "summary": "Store new batch article main groups",
        "requestBody": {
          "description": "Article main group",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Store new batch article main groups",
                    "items": {
                      "$ref": "#/components/schemas/ArticleMainGroup"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/articles/{article}/translations/{field}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get one or more article field translations",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "Translation field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language id or language ISO 639-1 code",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Article field translations",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Set or update an article field translation",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "Translation field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Translation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Translation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "CREATED",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete one or all translations for a field",
        "description": "When no language is supplied, all translations for the field will be removed.",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "field",
            "in": "path",
            "description": "Translation field",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language id or language ISO 639-1 code",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/main_articles": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get list of main articles",
        "parameters": [
          {
            "name": "include_hidden",
            "in": "query",
            "description": "If true, soft deleted main articles will be included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the main article(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Main article list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Articles"],
        "summary": "Store new main article",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the main article(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Main article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MainArticle"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/main_articles/{main_article}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get specific main article",
        "parameters": [
          {
            "name": "main_article",
            "in": "path",
            "description": "Main article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the main article(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article main group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MainArticle"
                }
              }
            }
          },
          "404": {
            "description": "Entity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update main article",
        "parameters": [
          {
            "name": "main_article",
            "in": "path",
            "description": "Main article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * customFields: Custom fields set for the main article(s).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["customFields"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Main article",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MainArticle"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Articles"],
        "summary": "Delete main article",
        "parameters": [
          {
            "name": "main_article",
            "in": "path",
            "description": "Main article ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/main_articles/batch": {
      "post": {
        "tags": ["Articles"],
        "summary": "Store new batch main articles",
        "requestBody": {
          "description": "Main article",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Store new batch main articles",
                    "items": {
                      "$ref": "#/components/schemas/MainArticle"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/articles/{article}/stock/warehouses/{warehouse}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get warehouse stock info.",
        "description": "Gets information for default warehouse if no supplied.",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "warehouse",
            "in": "path",
            "description": "Warehouse id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseStock"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Articles"],
        "summary": "Update warehouse stock info",
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "warehouse",
            "in": "path",
            "description": "Warehouse id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Translation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseStock"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/articles/stock": {
      "put": {
        "tags": ["Articles"],
        "summary": "Update warehouse stock info from batch",
        "requestBody": {
          "description": "Translation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseStock"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/articles/stock/warehouses/{warehouse}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get all stock for given warehouse",
        "parameters": [
          {
            "name": "warehouse",
            "in": "path",
            "description": "Warehouse id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedAfter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        }
      }
    },
    "/articles/{article}/stock/warehouses/{warehouse}/mutate": {
      "post": {
        "tags": ["Articles"],
        "parameters": [
          {
            "name": "article",
            "in": "path",
            "description": "Article id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "warehouse",
            "in": "path",
            "description": "Warehouse id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StockMutation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/asset_classes": {
      "get": {
        "tags": ["AssetClasses"],
        "summary": "Get asset classes list",
        "responses": {
          "200": {
            "description": "AssetClass",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["AssetClasses"],
        "summary": "Store asset class",
        "requestBody": {
          "description": "AssetClass",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetClass"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/asset_classes/{asset_class}": {
      "put": {
        "tags": ["AssetClasses"],
        "summary": "Update asset class",
        "parameters": [
          {
            "name": "asset_class",
            "in": "path",
            "description": "Asset class ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "AssetClass",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetClass"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["AssetClasses"],
        "summary": "Delete asset class",
        "parameters": [
          {
            "name": "asset_class",
            "in": "path",
            "description": "Asset class ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/assets": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get assets list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "onlyRoot",
            "in": "query",
            "description": "Only return assets without a parent asset (default true)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Assets"],
        "summary": "Store asset",
        "requestBody": {
          "description": "Asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Asset"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/assets/{asset}": {
      "get": {
        "tags": ["Assets"],
        "summary": "Get a specific asset",
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "404": {
            "description": "Entity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Assets"],
        "summary": "Update asset",
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Asset"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Assets"],
        "summary": "Delete asset",
        "parameters": [
          {
            "name": "asset",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/assets/external/{sourceRelation}/{externalId}": {
      "post": {
        "tags": ["Assets"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Asset"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/asset_custom_fields": {
      "get": {
        "tags": ["AssetCustomFields"],
        "summary": "Get asset custom field list",
        "responses": {
          "200": {
            "description": "AssetCustomField",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/choicelists/{choicelist}": {
      "get": {
        "tags": ["CustomAttributes"],
        "summary": "Get custom attribute choicelist",
        "parameters": [
          {
            "name": "choicelist",
            "in": "path",
            "description": "Attribute choicelist id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeChoice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/documents/{document}/mail": {
      "post": {
        "tags": ["Documents"],
        "summary": "Mail a document",
        "description": "Mail a document / attachment to a recipient. This call will use the default contact e-mail address of the relation from\nthe document unless a contact person id or to e-mail address is supplied.\n\nThe id of the document can be found in the \"data_documenten\" table or will be returned from other api calls.",
        "parameters": [
          {
            "name": "document",
            "in": "path",
            "description": "The stored document id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contactperson": {
                    "type": "integer",
                    "description": "When set uses contactperson e-mail address as receivers to address.\n    Not allowed in combination with 'to'."
                  },
                  "to": {
                    "type": "array",
                    "description": "Recipient e-mail address(es).\n    Name can be added using 'First Lastname &lt;mail@test.com&gt;'.\n    Not allowed in combination with 'contactperson'.",
                    "items": {
                      "type": "string",
                      "example": "mail@test.com"
                    }
                  },
                  "cc": {
                    "type": "array",
                    "description": "CC e-mail address(es)",
                    "items": {
                      "type": "string",
                      "example": "mail@test.com"
                    }
                  },
                  "bcc": {
                    "type": "array",
                    "description": "BCC e-mail address(es)",
                    "items": {
                      "type": "string",
                      "example": "mail@test.com"
                    }
                  },
                  "subject": {
                    "type": "string",
                    "description": "E-mail subject"
                  },
                  "body": {
                    "type": "string",
                    "description": "E-mail html body content"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/files/{file}/download": {
      "get": {
        "tags": ["Files"],
        "summary": "Download the specified file.",
        "description": "This route supports the standard If-Modified-Since and If-None-Match HTTP headers to avoid retrieving\nunchanged data.",
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "The ID of the file to download.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "Sets the Content-Disposition HTTP header to 'inline' (true; a browser will try to render the file) or 'attachment' (default, false; a browser will offer the file as a download)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/files/upload": {
      "post": {
        "tags": ["Files"],
        "summary": "Upload a file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file"],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Uploaded file",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK -- the file was recognised as a duplicate of an existing file, and no new file has been\n    created. The response includes data for that existing file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "Created -- the file has been uploaded, and the response includes data on the uploaded file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get invoice list",
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "description": "If specified, only invoices by given order id will be shown.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "debtor",
            "in": "query",
            "description": "If specified, only invoices by given debtor will be shown.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "available include:\n     *              lines: Invoice lines per invoice shown.\n     *              debtor: Shows debtor relation information.\n     *              paymentCondition: Shows payment condition information.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["lines", "debtor", "paymentCondition"]
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Invoice list",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/knowledge_base/explanations": {
      "get": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * author: The author of the explanation.\n * menuItem: The explanation is part of a menu item.\n * menuItem.product: The product the menu item belongs to.\n * children: The explanation children.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["author", "menuItem", "menuItem.product", "children"]
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Only lists explanations where the given string matches with the title or description(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "Only lists explanations which are part of the given Troublefree product id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "menuItem",
            "in": "query",
            "description": "Only lists explanations which are part of the given menuItem id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "newestFirst",
            "in": "query",
            "description": "Order the list by creation date",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Explanation list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * author: The author of the explanation.\n * menuItem: The explanation is part of a menu item.\n * menuItem.product: The product the menu item belongs to.\n * children: The explanation children.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["author", "menuItem", "menuItem.product", "children"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge explanation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeExplanation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/knowledge_base/explanations/{explanation}": {
      "get": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "explanation",
            "in": "path",
            "description": "Knowledge explanation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * author: The author of the explanation.\n * menuItem: The explanation is part of a menu item.\n * menuItem.product: The product the menu item belongs to.\n * children: The explanation children.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["author", "menuItem", "menuItem.product", "children"]
              }
            }
          },
          {
            "name": "skipIntern",
            "in": "query",
            "description": "Skip intern explanations",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Knowledge Explanation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "explanation",
            "in": "path",
            "description": "Knowledge explanation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * author: The author of the explanation.\n * menuItem: The explanation is part of a menu item.\n * menuItem.product: The product the menu item belongs to.\n * children: The explanation children.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["author", "menuItem", "menuItem.product", "children"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge explanation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeExplanation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "explanation",
            "in": "path",
            "description": "Knowledge explanation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/knowledge_base/menuItems": {
      "get": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "product",
            "in": "query",
            "description": "Only lists menu items which are part of the given Troublefree product id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * product: The product the menu item belongs to.\n * parentMenuItem: The parent menu item of the menu item.\n * childMenuItems: The children of the menu item.\n * explanation: The explanation linked to this menu item.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "product",
                  "parentMenuItem",
                  "childMenuItems",
                  "explanation",
                  "explanation.children"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Knowledge menu item list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * product: The product the menu item belongs to.\n * parentMenuItem: The parent menu item of the menu item.\n * childMenuItems: The children of the menu item.\n * explanation: The explanation linked to this menu item.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "product",
                  "parentMenuItem",
                  "childMenuItems",
                  "explanation",
                  "explanation.children"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge menu item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeMenuItem"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/knowledge_base/menuItems/{menuItem}": {
      "get": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "menuItem",
            "in": "path",
            "description": "Knowledge menu item id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * product: The product the menu item belongs to.\n * parentMenuItem: The parent menu item of the menu item.\n * childMenuItems: The children of the menu item.\n * explanation: The explanation linked to this menu item.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "product",
                  "parentMenuItem",
                  "childMenuItems",
                  "explanation",
                  "explanation.children"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Knowledge menu item",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "menuItem",
            "in": "path",
            "description": "Knowledge menu item id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * product: The product the menu item belongs to.\n * parentMenuItem: The parent menu item of the menu item.\n * childMenuItems: The children of the menu item.\n * explanation: The explanation linked to this menu item.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "product",
                  "parentMenuItem",
                  "childMenuItems",
                  "explanation",
                  "explanation.children"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge menu item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeMenuItem"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/knowledge_base/products": {
      "get": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * contactPerson: The contact person for the product.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["contactPerson"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Knowledge product list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * contactPerson: The contact person for the product.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["contactPerson"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeTroublefreeProduct"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/knowledge_base/products/{product}": {
      "put": {
        "tags": ["Knowledge Base"],
        "parameters": [
          {
            "name": "product",
            "in": "path",
            "description": "Knowledge product id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available Includes:\n * contactPerson: The contact person for the product.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["contactPerson"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Knowledge product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeTroublefreeProduct"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/layouts/{type}/{document}": {
      "get": {
        "tags": ["Documents"],
        "summary": "Download a pdf layout for a document",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Layout id, layout type or print series name, can also use documenttypes:\n * incassomachtiging\n * offerte\n * relatie\n * voorraadbeheer\n * factuur\n * pakbon\n * order\n * abonnement\n * factuur_herinnering\n * factuur_herinnering2\n * factuur_incasso\n * klaarzetbon\n * inkoop_pakbon",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document",
            "in": "path",
            "description": "The id of the document of {type}",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/layouts/{type}/{document}/print": {
      "post": {
        "tags": ["Documents"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Layout id, layout type or print series name, can also use documenttypes:\n * incassomachtiging\n * offerte\n * relatie\n * voorraadbeheer\n * factuur\n * pakbon\n * order\n * abonnement\n * factuur_herinnering\n * factuur_herinnering2\n * factuur_incasso\n * klaarzetbon\n * inkoop_pakbon",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "document",
            "in": "path",
            "description": "The id of the document of {type}",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Print layout data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "printer": {
                    "type": "string"
                  },
                  "relation": {
                    "type": "integer"
                  },
                  "contact": {
                    "type": "integer"
                  },
                  "numCopies": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/offers": {
      "get": {
        "tags": ["Offers"],
        "summary": "Fetches a list of offers.",
        "description": "Most of the offer fields defined in the response can also be used as GET parameters to filter the list.\nFor instance, add '?debtor=123' to only return offers for the relation with ID '123'.",
        "parameters": [
          {
            "name": "status_final",
            "in": "query",
            "description": "If true, return only offers with statuses that are considered 'final' (i.e. statuses that\n do not lead to other statuses). If false, return only offers with statuses that are NOT considered 'final'.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * employee: Additional information about the employee that created the order.\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the offer, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customFields",
                  "debtor",
                  "employee",
                  "lines",
                  "lines.article",
                  "lines.lineTotal",
                  "lines.unitPrice"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Offers"],
        "summary": "Store single offer.",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * employee: Additional information about the employee that created the order.\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the offer, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customFields",
                  "debtor",
                  "employee",
                  "lines",
                  "lines.article",
                  "lines.lineTotal",
                  "lines.unitPrice"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Offer data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offer"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/offers/{offer}": {
      "get": {
        "tags": ["Offers"],
        "summary": "Get single offer.",
        "parameters": [
          {
            "name": "offer",
            "in": "path",
            "description": "Offer id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * employee: Additional information about the employee that created the order.\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the offer, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customFields",
                  "debtor",
                  "employee",
                  "lines",
                  "lines.article",
                  "lines.lineTotal",
                  "lines.unitPrice"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Offers"],
        "summary": "Update single offer.",
        "parameters": [
          {
            "name": "offer",
            "in": "path",
            "description": "Offer id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * employee: Additional information about the employee that created the order.\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the offer, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customFields",
                  "debtor",
                  "employee",
                  "lines",
                  "lines.article",
                  "lines.lineTotal",
                  "lines.unitPrice"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Offer data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Offer"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/offers/{offer}/approve": {
      "post": {
        "tags": ["Offers"],
        "summary": "Create an order from an offer, and mark the offer as 'approved'.",
        "parameters": [
          {
            "name": "offer",
            "in": "path",
            "description": "Offer id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderDeliveryAt",
            "in": "query",
            "description": "The date of delivery (YYYY-MM-DD) to set on the order to create",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderLocation",
            "in": "query",
            "description": "The ID of the location to set on the order to create",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["signature"],
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "Signature image file upload",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "debtor",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines"
                ]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Used to sort the order list, the key is the field to sort by and the value is the direction e.g. orderby[id]=ASC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Only lists orders where the given string matches with the reference, addressName (attentionOf), street, city or postcode",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter orders on special criteria",
            "schema": {
              "type": "string",
              "enum": [
                "not_completed",
                "not_delivered",
                "not_invoiced",
                "completed",
                "ready_for_delivery",
                "delivered_invoiced_locked",
                "partially_delivered",
                "not_invoiced_and_not_delivered",
                "not_reserved",
                "delivered",
                "reserved",
                "reserved_deliver_locked",
                "invoiced",
                "invoice_locked",
                "no_receipt_not_delivered",
                "paid_not_completed",
                "paid_not_delivered",
                "in_shipment"
              ]
            }
          },
          {
            "name": "withoutSourceFor",
            "in": "query",
            "description": "Only select orders without external link to a source Relation. Use '*' to exclude all sources",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Order list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Orders"],
        "summary": "Store new order",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "debtor",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{order}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get single order",
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Default includes:\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.\n\nAvailable includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines.article",
                  "lines.lineTotal",
                  "lines.unitPrice"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Orders"],
        "summary": "Update order",
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "debtor",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Orders"],
        "summary": "Delete order",
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/orders/external/{sourceRelation}/{externalId}": {
      "put": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "debtor",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{order}/invoice": {
      "post": {
        "tags": ["Orders"],
        "summary": "Invoice order",
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {}
          }
        }
      }
    },
    "/orders/{order}/payments": {
      "post": {
        "tags": ["Orders"],
        "summary": "Store payment for Order",
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes for Response:\n * order: The order that the payment was made on.\n * paymentMethod: Additional information about the payment method used.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["order", "paymentMethod"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Payment data",
          "content": {
            "application/json": {
              "schema": {
                "required": ["amount", "method"],
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "The payment amount that will be added to the order."
                  },
                  "method": {
                    "type": "integer",
                    "description": "The ID of the payment method used for the payment"
                  },
                  "currency": {
                    "type": "integer",
                    "description": "The ID of the currency used for the payment. If omitted, the currency configured for the order will be used."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/preview": {
      "post": {
        "tags": ["Orders"],
        "summary": "A fictive order is created and returned.",
        "description": "This method is used to get the current order values just as if the order would actually been pushed.",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "prePaidTotalAmount",
                  "orderSources",
                  "debtor",
                  "employee",
                  "project",
                  "invoicingCondition",
                  "lines"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/{order}/deliver": {
      "post": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "order",
            "in": "path",
            "description": "Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Order deliver data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "batchDelivery": {
                    "type": "boolean",
                    "default": false
                  },
                  "packingSlip": {
                    "type": "object",
                    "properties": {
                      "work": {
                        "type": "string"
                      },
                      "deliveryMethod": {
                        "type": "integer"
                      },
                      "pickedUpBy": {
                        "type": "string"
                      },
                      "employee": {
                        "type": "integer"
                      },
                      "completeDelivery": {
                        "type": "boolean"
                      }
                    }
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "orderLineId": {
                          "type": "integer"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "serialNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/orders/external/{sourceRelation}/{externalId}/deliver": {
      "post": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Order deliver data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "packingSlip": {
                    "type": "object",
                    "properties": {
                      "work": {
                        "type": "string"
                      },
                      "deliveryMethod": {
                        "type": "integer"
                      },
                      "pickedUpBy": {
                        "type": "string"
                      },
                      "employee": {
                        "type": "integer"
                      },
                      "externalId": {
                        "type": "string"
                      },
                      "completeDelivery": {
                        "type": "boolean"
                      }
                    }
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "orderLineExternalId": {
                          "type": "string"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "serialNumbers": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/packing_slips": {
      "get": {
        "tags": ["PackingSlip"],
        "summary": "List packing slips",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "debtor",
            "in": "query",
            "description": "If specified, only packing slips with the given debtor are returned.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "If specified, only packing slips with the given date are returned (yyyy-mm-dd).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lowestIdFirst",
            "in": "query",
            "description": "If true, sort the packing slips from lowest id.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * debtor: Additional information about the debtor of the packing slip, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the packing slip.\n * lines: The lines of the packing slip, containing quantities, order lines, unites, etc.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["debtor", "employee", "lines.orderLine", "order"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PackingSlip",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": ["Project"],
        "summary": "List projects",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "attachments",
                  "contactPerson",
                  "customFields",
                  "events",
                  "labels",
                  "mainTask",
                  "orders",
                  "parentTicket",
                  "primaryLabel",
                  "relation",
                  "tasks",
                  "customFields",
                  "customFieldTypes"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Project list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Project"],
        "summary": "Create project",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "attachments",
                  "contactPerson",
                  "customFields",
                  "events",
                  "labels",
                  "mainTask",
                  "orders",
                  "parentTicket",
                  "primaryLabel",
                  "relation",
                  "tasks",
                  "customFields",
                  "customFieldTypes"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/projects/{project}": {
      "get": {
        "tags": ["Project"],
        "summary": "Show project",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "attachments",
                  "contactPerson",
                  "customFields",
                  "events",
                  "labels",
                  "mainTask",
                  "orders",
                  "parentTicket",
                  "primaryLabel",
                  "relation",
                  "tasks",
                  "customFields",
                  "customFieldTypes"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Project"],
        "summary": "Update project",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "attachments",
                  "contactPerson",
                  "customFields",
                  "events",
                  "labels",
                  "mainTask",
                  "orders",
                  "parentTicket",
                  "primaryLabel",
                  "relation",
                  "tasks",
                  "customFields",
                  "customFieldTypes"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Project"],
        "summary": "Delete project",
        "parameters": [
          {
            "name": "project",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/purchase/invoices": {
      "get": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "PurchaseInvoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseInvoice"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/invoices/{purchase_invoice}": {
      "get": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "purchase_invoice",
            "in": "path",
            "description": "Purchase invoice ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "purchase_invoice",
            "in": "path",
            "description": "Purchase invoice ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "PurchaseInvoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseInvoice"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/invoices/external/{sourceRelation}/{externalId}": {
      "get": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseInvoice",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "lines",
                  "lines.receiptLineAssignments",
                  "lines.suppliers",
                  "lines.purchaseOrderLines",
                  "lines.hasAssignments",
                  "lines.packingSlipNumber",
                  "suppliers",
                  "totalPrice",
                  "purchaseOrders",
                  "assignments",
                  "attachments"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "PurchaseInvoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseInvoice"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/purchase/orders": {
      "get": {
        "tags": ["Purchase"],
        "summary": "List purchase orders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Used to sort the list, the key is the field to sort by and the value is the direction e.g. orderby[id]=ASC",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Purchase"],
        "summary": "Store new purchase order",
        "parameters": [
          {
            "name": "markAsOrdered",
            "in": "query",
            "description": "If true, purchased order will be immediately marked as ordered",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Purchase order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/orders/{purchase_order}": {
      "get": {
        "tags": ["Purchase"],
        "summary": "Get single purchase order",
        "parameters": [
          {
            "name": "purchase_order",
            "in": "path",
            "description": "Purchase Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Purchase"],
        "summary": "Update purchase order",
        "parameters": [
          {
            "name": "purchase_order",
            "in": "path",
            "description": "Purchase Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Purchase order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Purchase"],
        "summary": "Delete purchase order",
        "parameters": [
          {
            "name": "purchase_order",
            "in": "path",
            "description": "Purchase Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/purchase/orders/external/{sourceRelation}/{externalId}": {
      "get": {
        "tags": ["Purchase"],
        "summary": "Get single purchase order by external id",
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseOrder",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Purchase"],
        "summary": "Update purchase order by external id",
        "parameters": [
          {
            "name": "markAsOrdered",
            "in": "query",
            "description": "If true, purchased order will be immediately marked as ordered",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Purchase order data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Purchase"],
        "summary": "Delete purchase order by external id",
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/purchase/orders/{purchase_order}/order": {
      "post": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "purchase_order",
            "in": "path",
            "description": "Purchase Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/orders/external/{sourceRelation}/{externalId}/order": {
      "post": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["supplier", "lines"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/orders/{purchase_order}/receive": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Receive purchase order",
        "parameters": [
          {
            "name": "purchase_order",
            "in": "path",
            "description": "Purchase Order id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Purchase order receive data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "packingSlipNumber": {
                    "type": "string",
                    "description": "Receive purchase order"
                  },
                  "items": {
                    "type": "array",
                    "description": "Receive purchase order",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Receive purchase order"
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Receive purchase order"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/orders/receive_multiple": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Receive multiple purchase orders",
        "requestBody": {
          "description": "Purchase order receive data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "packingSlipNumber": {
                    "type": "string",
                    "description": "Receive multiple purchase orders"
                  },
                  "items": {
                    "type": "array",
                    "description": "Receive multiple purchase orders",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Receive multiple purchase orders"
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Receive multiple purchase orders"
                        },
                        "purchaseOrder": {
                          "type": "string",
                          "description": "Receive multiple purchase orders"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/orders/external/{sourceRelation}/{externalId}/receive": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Receive purchase order by external id",
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this purchase order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Purchase order receive data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "packingSlipNumber": {
                    "type": "string",
                    "description": "Receive purchase order by external id"
                  },
                  "items": {
                    "type": "array",
                    "description": "Receive purchase order by external id",
                    "items": {
                      "type": "object",
                      "properties": {
                        "externalId": {
                          "type": "integer",
                          "description": "Receive purchase order by external id"
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Receive purchase order by external id"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/purchase/receipts": {
      "get": {
        "tags": ["Purchase"],
        "summary": "Get purchase receipts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "deliveryMethod",
                  "lines",
                  "lines.article",
                  "lines.comment",
                  "lines.unit",
                  "lines.warehouse",
                  "purchaseOrderNumbers",
                  "supplier"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/receipts/{purchase_receipt}/revert": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Revert a purchase receipt",
        "parameters": [
          {
            "name": "purchase_receipt",
            "in": "path",
            "description": "Purchase receipt id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/purchase/receipts/{purchase_receipt}/complete": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Complete a purchase receipt",
        "parameters": [
          {
            "name": "purchase_receipt",
            "in": "path",
            "description": "Purchase receipt id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "deliveryMethod",
                  "lines",
                  "lines.article",
                  "lines.comment",
                  "lines.unit",
                  "lines.warehouse",
                  "purchaseOrderNumbers",
                  "supplier"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/receipts/{purchase_receipt}/revert_completion": {
      "post": {
        "tags": ["Purchase"],
        "summary": "Reverse complete a purchase receipt",
        "parameters": [
          {
            "name": "purchase_receipt",
            "in": "path",
            "description": "Purchase receipt id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "deliveryMethod",
                  "lines",
                  "lines.article",
                  "lines.comment",
                  "lines.unit",
                  "lines.warehouse",
                  "purchaseOrderNumbers",
                  "supplier"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/purchase/receipts/{purchase_receipt}": {
      "get": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "purchase_receipt",
            "in": "path",
            "description": "Purchase receipt id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "deliveryMethod",
                  "lines",
                  "lines.article",
                  "lines.comment",
                  "lines.unit",
                  "lines.warehouse",
                  "purchaseOrderNumbers",
                  "supplier"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PurchaseReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Purchase"],
        "parameters": [
          {
            "name": "purchase_receipt",
            "in": "path",
            "description": "Purchase receipt id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "deliveryMethod",
                  "lines",
                  "lines.article",
                  "lines.comment",
                  "lines.unit",
                  "lines.warehouse",
                  "purchaseOrderNumbers",
                  "supplier"
                ]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Purchase receipt data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseReceipt"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "PurchaseReceipt",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/addresses": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get address list",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["country (returns country model as country|null)"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Addresses"],
        "summary": "Store new address",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Address",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/addresses/{address}": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get address",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["country (returns country model as country|null)"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Addresses"],
        "summary": "Update address",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Address",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Addresses"],
        "summary": "Remove address",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "in": "path",
            "description": "Address id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/relations/{relation}/addresses/external/{sourceRelation}/{externalId}": {
      "post": {
        "tags": ["Addresses"],
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sourceRelation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Address",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/contactpersons": {
      "get": {
        "tags": ["ContactPersons"],
        "summary": "Get contact persons list",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["ContactPersons"],
        "summary": "Store new contact person",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Address",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteContactPerson"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/contactpersons/{contactperson}": {
      "get": {
        "tags": ["ContactPersons"],
        "summary": "Get contact person",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contactperson",
            "in": "path",
            "description": "ContactPerson id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/contactpersons/external/{sourceRelation}/{externalId}": {
      "post": {
        "tags": ["ContactPersons"],
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sourceRelation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContactPerson",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPerson"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "ERROR",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/contactperson/{contactperson}": {
      "put": {
        "tags": ["ContactPersons"],
        "summary": "Update a contact person",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contactperson",
            "in": "path",
            "description": "ContactPerson id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "ContactPerson",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteContactPerson"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["ContactPersons"],
        "summary": "Remove a contact person",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contactperson",
            "in": "path",
            "description": "ContactPerson id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/relations/{relation}/ibans": {
      "get": {
        "tags": ["Relations"],
        "summary": "Get Iban list",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Relations"],
        "summary": "Create new Iban for a Relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Iban",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Iban"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/ibans/{iban}": {
      "put": {
        "tags": ["Relations"],
        "summary": "Update Iban for a relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "iban",
            "in": "path",
            "description": "IBAN id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Iban",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Iban"
              }
            }
          },
          "required": false
        },
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Relations"],
        "summary": "Remove Iban for a relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "iban",
            "in": "path",
            "description": "IBAN id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/relations/{relation}/mandates": {
      "get": {
        "tags": ["Relations"],
        "summary": "Get all or only available mandates for a relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "showUnavailable",
            "in": "query",
            "description": "If specified, can also show unavailable mandates",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Relations"],
        "summary": "Create direct debit mandate for relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "iban": {
                    "type": "string",
                    "description": "Iban number",
                    "example": "NL29ABNA9996666778"
                  },
                  "type": {
                    "type": "string",
                    "description": "Mandate type",
                    "enum": ["ONE-OFF", "RECURRENT"]
                  },
                  "scheme": {
                    "type": "string",
                    "description": "Mandate scheme",
                    "enum": ["CORE", "B2B"]
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/mandates/{mandate}/sign": {
      "post": {
        "tags": ["Relations"],
        "summary": "Sign a direct debit mandate",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mandate",
            "in": "path",
            "description": "Direct debit mandate id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["signature"],
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "Signature image file upload",
                    "format": "binary"
                  },
                  "signedBy": {
                    "type": "string",
                    "description": "Name of Signee"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/mandates/{mandate}": {
      "delete": {
        "tags": ["Relations"],
        "summary": "Remove direct debit mandate for a relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "mandate",
            "in": "path",
            "description": "Direct debit mandate id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/relations/price_agreements/batch": {
      "put": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Update existing price agreements in batch",
        "requestBody": {
          "description": "PriceAgreement",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Update existing price agreements in batch",
                    "items": {
                      "$ref": "#/components/schemas/RelationPriceAgreement"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Store new price agreements in batch",
        "requestBody": {
          "description": "PriceAgreement",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Store new price agreements in batch",
                    "items": {
                      "$ref": "#/components/schemas/RelationPriceAgreement"
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Remove existing price agreements in batch",
        "requestBody": {
          "description": "PriceAgreement",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Remove existing price agreements in batch",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Remove existing price agreements in batch"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/price_agreements": {
      "get": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Get all price agreements",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/price_agreements/articles": {
      "get": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Get price agreements",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/price_agreements": {
      "post": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Store new price agreement",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "PriceAgreement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationPriceAgreement"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}/price_agreements/{priceAgreement}": {
      "delete": {
        "tags": ["Relations/PriceAgreements"],
        "summary": "Remove a price agreement",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "priceAgreement",
            "in": "path",
            "description": "Price agreement id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/relations": {
      "get": {
        "tags": ["Relations"],
        "summary": "Get relations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "available includes:\n * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)\n * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.\n * updated_after: Only show relations that are updated after the given date.\n * include_hidden: Include hidden relations (soft deleted).\n * deliveryAddress: Show the delivery address of the relation.\n * contactAddress: Show the contact address of the relation.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "outstandingDeposits",
                  "status",
                  "updated_after",
                  "include_hidden",
                  "deliveryAddress",
                  "contactAddress"
                ]
              }
            }
          },
          {
            "name": "include_hidden",
            "in": "query",
            "description": "If true, also show deleted relations",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "updatedAfter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postcode",
            "in": "query",
            "description": "Postcode as part of the address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Housenumber as part of the address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Relations"],
        "summary": "Store relation",
        "requestBody": {
          "description": "Relation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/{relation}": {
      "get": {
        "tags": ["Relations"],
        "summary": "Get specific relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "available includes:\n * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)\n * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.\n * updated_after: Only show relations that are updated after the given date.\n * include_hidden: Include hidden relations (soft deleted).\n * deliveryAddress: Show the delivery address of the relation.\n * contactAddress: Show the contact address of the relation.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "outstandingDeposits",
                  "status",
                  "updated_after",
                  "include_hidden",
                  "deliveryAddress",
                  "contactAddress"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relation"
                }
              }
            }
          },
          "404": {
            "description": "Entity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Relations"],
        "summary": "Update relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Relation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/external/{sourceRelation}/{externalId}": {
      "post": {
        "tags": ["Relations"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Relation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Relation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/portal_auth_check": {
      "post": {
        "tags": ["Relations"],
        "summary": "Check a login via a relation.",
        "requestBody": {
          "description": "Login credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Check a login via a relation."
                  },
                  "password": {
                    "type": "string",
                    "description": "Check a login via a relation."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Failed login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/relations/source/{sourceRelation}/id/{externalId}": {
      "get": {
        "tags": ["Relations"],
        "summary": "Get relation by external source and id\nRetrieve a relation using the source relation and external id.",
        "description": "We identify external sources/services using a \"source relation\" which can be used to identify\nthe link between relations and their external ids.",
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Source relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id of relation",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/revenue": {
      "get": {
        "tags": ["Revenue"],
        "summary": "Get total revenue for given Relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "include_draft_orders",
            "in": "query",
            "description": "Whether to include draft orders in the revenue calculation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The total revenue for this Relation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/revenue/by_article_group": {
      "get": {
        "tags": ["Revenue"],
        "summary": "Get total revenue for each article group for a given Relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "include_draft_orders",
            "in": "query",
            "description": "Whether to include draft orders in the revenue calculation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The revenue for this Relation by article group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/relations/{relation}/revenue/by_month": {
      "get": {
        "tags": ["Revenue"],
        "summary": "Get total revenue for each year/month pair for a given Relation",
        "parameters": [
          {
            "name": "relation",
            "in": "path",
            "description": "Relation id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "include_draft_orders",
            "in": "query",
            "description": "Whether to include draft orders in the revenue calculation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The revenue for this Relation by year/month",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "year": {
                        "type": "integer",
                        "description": "Get total revenue for each year/month pair for a given Relation"
                      },
                      "month": {
                        "type": "integer",
                        "description": "Get total revenue for each year/month pair for a given Relation"
                      },
                      "revenue": {
                        "type": "number",
                        "description": "Get total revenue for each year/month pair for a given Relation"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries": {
      "get": {
        "tags": ["Locale"],
        "summary": "Get countries list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/exceptional_dates": {
      "get": {
        "tags": ["Schedule"],
        "summary": "Get a list of exceptional dates. Each entry is a datetime interval during which regular business operations\nmay be affected (e.g. a national holiday or vacation period)",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExceptionalDate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ticketing/schedule_entries": {
      "get": {
        "tags": ["Ticketing/ScheduleEntries"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["employee", "task", "planningPeriod"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Ticketing/ScheduleEntries"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["employee", "task", "planningPeriod"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "ScheduleEntry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketingScheduleEntry"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/ticketing/schedule_entries/{ticketingScheduleEntry}": {
      "put": {
        "tags": ["Ticketing/ScheduleEntries"],
        "parameters": [
          {
            "name": "ticketing_schedule_entry",
            "in": "path",
            "description": "Ticketing schedule entry id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Available includes",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["employee", "task", "planningPeriod"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "ScheduleEntry",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketingScheduleEntry"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Ticketing/ScheduleEntries"],
        "parameters": [
          {
            "name": "ticketing_schedule_entry",
            "in": "path",
            "description": "Ticketing schedule entry id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/transport/transport_rides": {
      "get": {
        "tags": ["Transport"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Which page of results to request; first is 1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "Number of results to return per page (default 100, min 1, max 1000)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Default includes:\n * palletCount\n * weight\n\nAvailable includes:\n * driver\n * items\n * vehicle",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["driver", "items", "vehicle"]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Transport ride list",
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Transport"],
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Default includes:\n * palletCount\n * weight\n\nAvailable includes:\n * driver\n * items\n * vehicle",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["driver", "items", "vehicle"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Transport ride data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransportRide"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/transport/transport_rides/external/{sourceRelation}/{externalId}": {
      "put": {
        "tags": ["Transport"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this transport ride",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Default includes:\n * palletCount\n * weight\n\nAvailable includes:\n * driver\n * items\n * vehicle",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["driver", "items", "vehicle"]
              }
            }
          }
        ],
        "requestBody": {
          "description": "Transport ride data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransportRide"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Transport"],
        "parameters": [
          {
            "name": "sourceRelation",
            "in": "path",
            "description": "Id of the relation used as reference for the external source link",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "External id linked to this transport ride",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    },
    "/transport/transport_rides/{transport_ride}": {
      "delete": {
        "tags": ["Transport"],
        "parameters": [
          {
            "name": "transport_ride",
            "in": "path",
            "description": "Transport ride id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Article": {
        "required": ["description", "id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "barCode": {
            "type": "string",
            "description": "EAN barcode"
          },
          "manufacturerCode": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "unit": {
            "type": "string",
            "description": "Id or name of article unit"
          },
          "extraDescription": {
            "type": "string"
          },
          "manufacturer": {
            "type": "integer"
          },
          "group": {
            "type": "integer"
          },
          "endOfLife": {
            "type": "boolean"
          },
          "suppliers": {
            "type": "array",
            "description": "Get objects with info about the article per supplier",
            "items": {
              "$ref": "#/components/schemas/ArticleSupplier"
            }
          },
          "packageWeight": {
            "type": "number",
            "format": "float"
          },
          "unitPerM2": {
            "type": "number",
            "format": "float"
          },
          "M2PerUnit": {
            "type": "number",
            "format": "float"
          },
          "purchaseQuantityIncrement": {
            "type": "number",
            "format": "float"
          },
          "purchaseQuantityMinimum": {
            "type": "number",
            "format": "float"
          },
          "unitsPerPackage": {
            "type": "number",
            "format": "float"
          },
          "layersPerPackage": {
            "type": "number",
            "format": "float"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "mainArticle": {
            "type": "integer"
          },
          "surchargeArticle": {
            "type": "integer"
          },
          "depositArticle": {
            "type": "integer"
          },
          "customFields": {
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string",
                "example": "fieldValue"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "Get the description that should be presented to a buyer.\nUse custom description when settings is set and custom description is not empty, else use description.\n\nPay attention: using the custom description depends on a global setting and often on context"
          },
          "images": {
            "type": "object",
            "properties": {},
            "description": "File IDs of images (0 to 4)"
          },
          "purchaseObligation": {
            "type": "string",
            "description": "Purchase obligation",
            "enum": [
              "unit",
              "package",
              "layer",
              "package_mini",
              "package_mini_layer"
            ]
          },
          "salesPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "resalePrice": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "ArticleGroup": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "mainGroup": {
            "type": "integer",
            "description": "The ArticleMainGroup associated with this Article"
          },
          "images": {
            "type": "array",
            "description": "File IDs of images",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ArticleMainGroup": {
        "required": ["articleGroups", "id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "articleGroups": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "name": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "description": "File IDs of images",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ArticleSupplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "article": {
            "$ref": "#/components/schemas/Article"
          },
          "supplier": {
            "$ref": "#/components/schemas/Relation"
          },
          "supplierArticleCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "purchasePriceGross": {
            "type": "string",
            "description": "The list purchase price for this supplier, before any relevant discounts or other agreements are applied."
          },
          "discountRate": {
            "type": "string",
            "description": "The discount percentage applied to the purchasePriceGross to obtain the purchasePrice. Stored separately to allow\nus to maintain e.g. a fixed 10% discount, even when the gross/net prices are rounded and imply a slightly\ndifferent rate."
          },
          "purchasePrice": {
            "type": "string"
          },
          "differentPurchasePrice": {
            "type": "string"
          },
          "recommendedRetailPrice": {
            "type": "string"
          },
          "orderQuantity": {
            "type": "string",
            "description": "The minimum quantity that must be ordered from this supplier in one purchase order,\nexpressed in terms of the article base unit.\n\nTODO: should probably be renamed purchaseQuantityMinimum to match the corresponding Article-level value"
          },
          "purchaseQuantityIncrement": {
            "type": "string",
            "description": "The step size in allowed order quantities, e.g. for a value of 3, acceptable order quantities are 3, 6, 9, ..."
          },
          "unitsPerSupplierPackage": {
            "type": "string"
          },
          "preferredSupplier": {
            "type": "boolean"
          },
          "obsolete": {
            "type": "boolean"
          }
        }
      },
      "MainArticle": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "group": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "description": "File IDs of images",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "assetClass": {
            "type": "integer"
          },
          "owner": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parentAsset": {
            "type": "integer",
            "description": "The Asset that this Asset is nested under."
          },
          "article": {
            "type": "integer"
          },
          "mainUser": {
            "type": "integer",
            "description": "The ContactPerson (within the $owner) that primarily uses this Asset."
          },
          "address": {
            "type": "integer",
            "description": "The address (within the $owner) where the Asset is located."
          },
          "addressRoom": {
            "type": "integer",
            "description": "The room (within the $address) where the asset is located."
          },
          "commissionedAt": {
            "type": "string",
            "description": "When the Asset entered (or will enter) into use."
          }
        }
      },
      "AssetClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the asset class."
          },
          "assetNameTemplate": {
            "type": "string",
            "description": "An optional default asset name template, used when the asset name is left empty"
          }
        }
      },
      "AssetCustomField": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "systemName": {
            "type": "string",
            "description": "The internal name that identifies the custom field. Used to e.g. communicate asset custom field values.\n\nMay only contain ASCII alphanumeric characters, underscores and dashes (/[a-zA-Z0-9_-]+/)"
          },
          "type": {
            "type": "integer"
          }
        }
      },
      "CustomAttributeChoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "listNumber": {
            "type": "integer",
            "description": "The attribute choice list number: a user-defined number by which the choices are grouped."
          },
          "name": {
            "type": "string",
            "description": "Attribute choice name"
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "debtor": {
            "type": "integer",
            "format": "int32"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "payed": {
            "type": "boolean"
          },
          "paidAmount": {
            "type": "number",
            "format": "float"
          },
          "chargedAmount": {
            "type": "number",
            "format": "float"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLine"
            }
          }
        }
      },
      "InvoiceLine": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "type": "string"
          },
          "unitPriceExcl": {
            "type": "object"
          },
          "quantity": {
            "type": "number",
            "format": "float"
          },
          "unitText": {
            "type": "string"
          },
          "discount": {
            "type": "number",
            "format": "float"
          },
          "isHidden": {
            "type": "boolean"
          },
          "headerText": {
            "type": "string",
            "description": ""
          },
          "headerNumber": {
            "type": "integer",
            "description": ""
          },
          "shouldCondenseHeader": {
            "type": "integer",
            "description": ""
          }
        }
      },
      "KnowledgeExplanation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "longDescription": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/Relation"
          },
          "hidden": {
            "type": "boolean"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KnowledgeExplanation"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KnowledgeExplanation"
            }
          }
        }
      },
      "KnowledgeMenuItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "menuItemName": {
            "type": "string"
          },
          "role": {
            "type": "boolean"
          },
          "parentMenuItem": {
            "$ref": "#/components/schemas/KnowledgeMenuItem"
          },
          "product": {
            "$ref": "#/components/schemas/KnowledgeTroublefreeProduct"
          }
        }
      },
      "KnowledgeTroublefreeProduct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "productName": {
            "type": "string"
          },
          "contactPerson": {
            "$ref": "#/components/schemas/Relation"
          }
        }
      },
      "Translation": {
        "type": "object",
        "properties": {
          "language": {
            "type": "integer"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "DeliveryAddressOffer": {
        "type": "object",
        "properties": {
          "attentionOf": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "The street of the delivery address. May also contain a number, particularly in old purchase orders."
          },
          "number": {
            "type": "string",
            "description": "The street number of the delivery address. For older orders the number might still be set in the street (AfleveringsAdres) column."
          },
          "postcode": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "description": "Country id\n\nNot as relation because Doctrine only supports simple columns in Embeddables"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "GLN": {
            "type": "string"
          }
        }
      },
      "Offer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "debtor": {
            "$ref": "#/components/schemas/Relation"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string"
          },
          "employee": {
            "$ref": "#/components/schemas/Relation"
          },
          "daysValid": {
            "type": "integer"
          },
          "deliveryMethod": {
            "type": "integer"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddressOffer"
          },
          "paymentCondition": {
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/OfferStatus"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferLine"
            }
          },
          "customFields": {
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string",
                "example": "fieldValue"
              }
            }
          },
          "totalPrice": {
            "$ref": "#/components/schemas/Price"
          }
        }
      },
      "OfferLine": {
        "type": "object",
        "properties": {
          "offer": {
            "type": "integer"
          },
          "quantity": {
            "type": "number",
            "format": "float"
          },
          "article": {
            "$ref": "#/components/schemas/Article"
          },
          "description": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "costPrice": {
            "type": "number",
            "description": "The column \"Regel_InkoopPrijs\" actually contains the costPrice",
            "format": "float"
          }
        }
      },
      "OfferStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "final": {
            "type": "boolean",
            "description": "Either 1 or 0, defines if the current status will change or not (if status is final)."
          }
        }
      },
      "DeliveryAddressOrder": {
        "type": "object",
        "properties": {
          "attentionOf": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "The street of the delivery address. May also contain a number, particularly in old purchase orders."
          },
          "postcode": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "countryId": {
            "type": "integer",
            "description": "Country id\n\nNot as relation because Doctrine only supports simple columns in Embeddables"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "GLN": {
            "type": "string"
          }
        }
      },
      "Order": {
        "required": ["debtor", "employee", "id", "lines"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "issuedAt": {
            "type": "string",
            "description": "Order document date. Created date by default, but can be manually changed.",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Updated at is updated using a lifeCycle callback, not Gedmo extensions because this uses custom type",
            "format": "date-time"
          },
          "debtor": {
            "$ref": "#/components/schemas/Relation"
          },
          "invoiceRelation": {
            "$ref": "#/components/schemas/Relation"
          },
          "reference": {
            "type": "string"
          },
          "orderType": {
            "type": "integer"
          },
          "employee": {
            "$ref": "#/components/schemas/Relation"
          },
          "deliveryAt": {
            "type": "string",
            "format": "date-time"
          },
          "deliveryDateUntil": {
            "type": "string",
            "format": "date-time"
          },
          "deliveryMethod": {
            "type": "integer"
          },
          "deliveryPreferredTime": {
            "type": "string"
          },
          "commentAboveLines": {
            "type": "string"
          },
          "commentBelowLines": {
            "type": "string"
          },
          "internalComment": {
            "type": "string"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddressOrder"
          },
          "delivered": {
            "type": "integer",
            "description": "The delivery status of the order. See *_DELIVERED constants for possible values."
          },
          "invoiced": {
            "type": "integer"
          },
          "reserved": {
            "type": "integer",
            "description": "See self::*_RESERVED constants"
          },
          "releaseInvoicingCondition": {
            "type": "integer"
          },
          "extraComment": {
            "type": "string"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderLine"
            }
          },
          "invoicingNotBefore": {
            "type": "string",
            "description": "Allow invoicing not before date",
            "format": "date-time"
          },
          "invoicingCondition": {
            "type": "integer",
            "description": "Conditions to allow invoicing"
          },
          "customFields": {
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string",
                "example": "fieldValue"
              }
            }
          },
          "pickingLocation": {
            "type": "string"
          }
        }
      },
      "OrderLine": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "headerNumber": {
            "type": "integer"
          },
          "headerText": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer"
          },
          "quantity": {
            "type": "number",
            "format": "float"
          },
          "quantityReserved": {
            "type": "number",
            "format": "float"
          },
          "quantityPicked": {
            "type": "number",
            "format": "float"
          },
          "quantityToDeliver": {
            "type": "number",
            "format": "float"
          },
          "unit": {
            "type": "string"
          },
          "article": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Article"
            }
          },
          "description": {
            "type": "string"
          },
          "remark": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "OrderLineSource": {
        "type": "object",
        "properties": {
          "sourceRelation": {
            "type": "integer"
          },
          "externalId": {
            "type": "string"
          },
          "orderLine": {
            "type": "integer"
          }
        }
      },
      "OrderSource": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "description": "Relation for which we store the external id"
          },
          "sourceRelation": {
            "type": "integer",
            "description": "Relation which acts as the relation source and is linked to an external source"
          },
          "externalId": {
            "type": "string",
            "description": "Id of the relation from the external source"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "DeliveryAddressPackingSlip": {
        "type": "object",
        "properties": {
          "attentionOf": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "This field might also (still) contain the street number for packing slips before the addition of `street_number` ($number)"
          },
          "postcode": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          }
        }
      },
      "PackingSlip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "employee": {
            "$ref": "#/components/schemas/Relation"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackingSlipLine"
            }
          }
        }
      },
      "PackingSlipLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "packingSlip": {
            "$ref": "#/components/schemas/PackingSlip"
          },
          "orderLine": {
            "$ref": "#/components/schemas/OrderLine"
          },
          "quantity": {
            "type": "number",
            "format": "float"
          },
          "quantityUndelivered": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "OrderPayment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "amount": {
            "type": "number"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "posDescription": {
            "type": "string"
          },
          "openCashDrawer": {
            "type": "boolean"
          },
          "location": {
            "type": "object"
          }
        }
      },
      "RelationPriceAgreement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "relation": {
            "type": "integer"
          },
          "agreementType": {
            "type": "string"
          },
          "article": {
            "$ref": "#/components/schemas/Article"
          },
          "conditionQuantity": {
            "type": "integer"
          },
          "conditionType": {
            "type": "string"
          },
          "discountPercentage": {
            "type": "number"
          },
          "fixedPrice": {
            "type": "number"
          },
          "type": {
            "type": "number"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "relation": {
            "$ref": "#/components/schemas/Relation"
          },
          "contactPerson": {
            "$ref": "#/components/schemas/ContactPerson"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DeliveryAddress": {
        "type": "object",
        "properties": {
          "attentionOf": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "The street of the delivery address. May also contain a number, particularly in old purchase orders."
          },
          "number": {
            "type": "string",
            "description": "The number part of the delivery address. May not be filled out, particularly in old purchase orders."
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryName": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "GLN": {
            "type": "string"
          }
        }
      },
      "PurchaseInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseInvoiceLine"
            }
          },
          "supplier": {
            "$ref": "#/components/schemas/Relation"
          },
          "packingSlipNumber": {
            "type": "string",
            "description": "Receipt number from the received packing slip"
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "final": {
            "type": "boolean"
          },
          "exportedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "invoicedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PurchaseInvoiceLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "finalPrice": {
            "type": "string"
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time"
          },
          "purchaseInvoice": {
            "$ref": "#/components/schemas/PurchaseInvoice"
          },
          "originalPurchasePrice": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          },
          "vat": {
            "type": "integer"
          },
          "discount": {
            "type": "string"
          },
          "purchasePrice": {
            "type": "string"
          },
          "salesPrice": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Description of the lot"
          }
        }
      },
      "PurchaseInvoiceLineSource": {
        "type": "object",
        "properties": {
          "sourceRelation": {
            "type": "integer",
            "description": "Relation which acts as the relation source and is linked to an external source"
          },
          "externalId": {
            "type": "string",
            "description": "Id of the relation from the external source"
          },
          "purchaseInvoiceLine": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PurchaseInvoiceSource": {
        "type": "object",
        "properties": {
          "sourceRelation": {
            "type": "integer",
            "description": "Relation which acts as the relation source and is linked to an external source"
          },
          "externalId": {
            "type": "string",
            "description": "Id of the relation from the external source"
          },
          "purchaseInvoice": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PurchaseOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date on which this purchase order was created.",
            "format": "date-time"
          },
          "orderedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deliveryAt": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Relation"
          },
          "deliveryMethod": {
            "type": "integer"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DeliveryAddress"
          },
          "supplier": {
            "$ref": "#/components/schemas/Relation"
          },
          "supplierComment": {
            "type": "string"
          },
          "supplierOrderNumber": {
            "type": "string"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderLine"
            }
          },
          "orderLineSortBy": {
            "type": "string"
          }
        }
      },
      "PurchaseOrderDeliveryMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The name for the delivery method that the user sees"
          },
          "type": {
            "type": "integer",
            "description": "The type of delivery method. These values are used to trigger different behaviour.\n\nFor example, when selecting a TYPE_PICKUP delivery method, the purchase order address is labeled as a\n\"pickup address\", and the address is set to that of the creditor of the purchase order by default."
          }
        }
      },
      "PurchaseOrderLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "salesOrder": {
            "type": "integer"
          },
          "unit": {
            "type": "integer"
          },
          "baseQuantity": {
            "type": "object",
            "description": "The base quantity in the article unit, as stored in the DB. Set to null when there is no DB value or $quantity\nhas been changed."
          },
          "originalBaseQuantity": {
            "type": "object",
            "description": "The base quantity in the article unit, as stored in the DB after ordering the order."
          },
          "baseQuantityDelivered": {
            "type": "object",
            "description": "Quantity in the article base unit"
          },
          "quantityDelivered": {
            "type": "object",
            "description": "Quantity in the article base unit"
          },
          "description": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "article": {
            "type": "integer",
            "description": "Nullable by CleanAssociations, although undesired"
          },
          "articleCode": {
            "type": "string"
          }
        }
      },
      "PurchaseOrderLineSource": {
        "type": "object",
        "properties": {
          "sourceRelation": {
            "type": "integer",
            "description": "Relation which acts as the relation source and is linked to an external source"
          },
          "externalId": {
            "type": "string",
            "description": "Id of the relation from the external source"
          },
          "purchaseOrderLine": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PurchaseOrderSource": {
        "type": "object",
        "properties": {
          "sourceRelation": {
            "type": "integer",
            "description": "Relation which acts as the relation source and is linked to an external source"
          },
          "externalId": {
            "type": "string",
            "description": "Id of the relation from the external source"
          },
          "purchaseOrder": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PurchaseReceipt": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "supplier": {
            "$ref": "#/components/schemas/Relation"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseReceiptLine"
            }
          },
          "packingSlipNumber": {
            "type": "string",
            "description": "Receipt number from the received packing slip"
          },
          "reference": {
            "type": "string"
          },
          "deliveryAt": {
            "type": "string",
            "description": "Expected delivery date",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "description": "Actual delivery datetime or moment purchase receipt is completed",
            "format": "date-time"
          },
          "receivedStatus": {
            "type": "integer",
            "description": "Received status of purchase receipt (not / partially / fully received)"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/PurchaseOrderDeliveryMethod"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/PurchaseReceiptAddress"
          }
        }
      },
      "PurchaseReceiptAddress": {
        "type": "object",
        "properties": {
          "attentionOf": {
            "type": "string"
          },
          "street": {
            "type": "string",
            "description": "The street of the delivery address. May also contain a number, particularly in old purchase orders."
          },
          "number": {
            "type": "string",
            "description": "The number part of the delivery address. May not be filled out, particularly in old purchase orders."
          },
          "district": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "PurchaseReceiptLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "article": {
            "$ref": "#/components/schemas/Article"
          },
          "articleBarcode": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "baseQuantity": {
            "type": "string",
            "description": "The quantity in the base article unit, as stored in the DB"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "street": {
            "type": "string",
            "description": "Street name"
          },
          "city": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "district": {
            "type": "string"
          },
          "addressName": {
            "type": "string"
          },
          "gln": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "description": "ISO Alpha-2 Country code"
          },
          "isContact": {
            "type": "boolean",
            "description": "Default contact address"
          },
          "isDelivery": {
            "type": "boolean",
            "description": "Default delivery address"
          }
        }
      },
      "ContactPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "relation": {
            "$ref": "#/components/schemas/Relation"
          },
          "gender": {
            "type": "string",
            "enum": ["M", "V", "F", ""]
          },
          "firstName": {
            "type": "string"
          },
          "lastNamePrefix": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "phoneMobile": {
            "type": "string"
          },
          "phoneWork": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "position": {
            "type": "string",
            "description": "The job position or function"
          }
        }
      },
      "Iban": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "relation": {
            "type": "integer",
            "readOnly": true
          },
          "iban": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          }
        }
      },
      "Relation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "gender": {
            "type": "string",
            "example": "M",
            "enum": ["M", "V", "F", ""]
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "companyPrefix": {
            "type": "string",
            "description": "Company name prefix"
          },
          "phone": {
            "type": "string"
          },
          "phoneMobile": {
            "type": "string"
          },
          "phoneWork": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "E-mail, also known as general mail address"
          },
          "initials": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "vatNumber": {
            "type": "string"
          },
          "chamberOfCommerceNumber": {
            "type": "string"
          },
          "types": {
            "type": "array",
            "description": "A list of types that the relation belongs to.\n\nStored in the database as a comma-separated list in a VARCHAR. Can be queried using FIND_IN_SET, as shown in\nRelationRepository::findAllOfType",
            "items": {
              "type": "integer",
              "example": 6
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "active": {
                "type": "boolean",
                "description": "A bit field containing RelationStatus constants.",
                "example": true
              },
              "verified": {
                "type": "boolean",
                "description": "A bit field containing RelationStatus constants.",
                "example": false
              },
              "defunct": {
                "type": "boolean",
                "description": "A bit field containing RelationStatus constants.",
                "example": false
              }
            },
            "description": "A bit field containing RelationStatus constants."
          },
          "group": {
            "type": "integer"
          },
          "applyGroupProperties": {
            "type": "boolean",
            "description": "Apply group properties to the relation after changing the group or creating a new relation.\n     *                   Required when 'group' is supplied."
          },
          "paymentConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationPaymentCondition"
            }
          },
          "externalCode": {
            "type": "integer"
          },
          "customFields": {
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string",
                "example": "fieldValue"
              }
            }
          }
        }
      },
      "RelationPaymentCondition": {
        "type": "object",
        "properties": {
          "orderType": {
            "type": "integer",
            "description": "Order type id"
          },
          "paymentCondition": {
            "type": "integer",
            "description": "Payment condition id"
          }
        }
      },
      "SepaDirectDebitMandate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "relation": {
            "type": "integer",
            "format": "int32"
          },
          "iban": {
            "$ref": "#/components/schemas/Iban"
          },
          "signed": {
            "type": "boolean"
          },
          "firstUseAt": {
            "type": "string",
            "format": "date-time"
          },
          "indexNumber": {
            "type": "integer"
          },
          "type": {
            "type": "integer"
          },
          "maximumAmount": {
            "type": "string",
            "description": "The amount will be applied to the total of all transactions for one mandate in a export.\nEven if there are transactions for a single mandate on different dates, the mandate will be considered\nfor the sum of those transactions.",
            "example": "5000.25"
          },
          "scheme": {
            "type": "string",
            "description": "Sepa Direct Debit scheme (Core / B2B). Use SEPA_SCHEME_* constants",
            "enum": ["CORE", "B2B"]
          },
          "reference": {
            "type": "string"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "signedDocument": {
            "type": "integer",
            "description": "Id of the signed document. Use this id to mail the signed mandate document."
          },
          "signedFile": {
            "type": "integer",
            "description": "id of the signed document file"
          },
          "signedBy": {
            "type": "string",
            "description": "name of the document signer",
            "default": "null"
          },
          "confirmed": {
            "type": "boolean"
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "isoCode": {
            "type": "string",
            "description": "Iso Code"
          },
          "euMember": {
            "type": "boolean",
            "description": "Is country a European Union member"
          },
          "sticky": {
            "type": "boolean",
            "description": "Sticky on top in lists"
          }
        }
      },
      "ExceptionalDate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "startsAt": {
            "type": "string",
            "description": "The first datetime that is part of the range",
            "example": "2020-12-10T00:00:00"
          },
          "endsAt": {
            "type": "string",
            "description": "The last datetime that is part of the range",
            "example": "2020-12-10T23:59:59"
          },
          "noDeliveries": {
            "type": "boolean"
          },
          "noProduction": {
            "type": "boolean"
          },
          "noWork": {
            "type": "boolean"
          }
        }
      },
      "StockMutation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "mutationReason": {
            "$ref": "#/components/schemas/StockMutationReason"
          },
          "mutationAmount": {
            "type": "number",
            "description": "mutation number up or down -> can be negative?",
            "format": "float"
          },
          "newStock": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "totalPrice": {
            "type": "number",
            "description": "total amount ex btw",
            "format": "float"
          },
          "userName": {
            "type": "string",
            "description": "The name of the user that is logged-in",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "exportedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "action": {
            "type": "string",
            "description": "Action in application which results in the mutation, e.g. StockMutation::ACTION_IMPORT",
            "readOnly": true
          },
          "explanation": {
            "type": "string"
          }
        }
      },
      "StockMutationReason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "reason": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "WarehouseStock": {
        "type": "object",
        "properties": {
          "article": {
            "type": "integer"
          },
          "warehouse": {
            "type": "integer"
          },
          "quantity": {
            "type": "number",
            "format": "float"
          },
          "minimum": {
            "type": "number",
            "format": "float"
          },
          "maximum": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Download link for file."
          },
          "mimeType": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "directory": {
            "type": "object",
            "description": "Parent directory"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "TicketingScheduleEntry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          },
          "task": {
            "type": "object"
          },
          "startsAt": {
            "type": "string",
            "format": "date-time"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time"
          },
          "employee": {
            "type": "integer"
          },
          "planningPeriod": {
            "type": "integer"
          }
        }
      },
      "TransportRide": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "driver": {
            "$ref": "#/components/schemas/Relation"
          },
          "vehicle": {
            "$ref": "#/components/schemas/TransportVehicle"
          },
          "departureDate": {
            "type": "string",
            "format": "date-time"
          },
          "departureTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportRideItem"
            }
          }
        }
      },
      "TransportRideItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "transportRide": {
            "type": "integer"
          },
          "order": {
            "type": "integer"
          },
          "packingSlip": {
            "type": "integer"
          },
          "sequenceNumber": {
            "type": "integer"
          }
        }
      },
      "TransportVehicle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "palletPlaces": {
            "type": "integer"
          },
          "loadCapacity": {
            "type": "integer"
          }
        }
      },
      "Vat": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "WriteContactPerson": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactPerson"
          },
          {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "description": "Write only field to set password"
              }
            }
          }
        ]
      },
      "Dimensions": {
        "type": "object",
        "properties": {
          "length": {
            "type": "number",
            "description": "Length in centimetres"
          },
          "width": {
            "type": "number",
            "description": "Width in centimetres"
          },
          "height": {
            "type": "number",
            "description": "Height in centimetres"
          }
        }
      },
      "Error": {
        "required": ["message", "status_code"],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "422 Unprocessable Entity"
          },
          "errors": {
            "type": "object",
            "properties": {
              "attribute": {
                "type": "array",
                "description": "Errors per attribute",
                "items": {
                  "type": "string",
                  "example": "Error message for attribute"
                }
              }
            },
            "description": "Error messages per attribute"
          },
          "status_code": {
            "type": "integer",
            "description": "Http status code",
            "example": 422
          }
        }
      },
      "response_pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results"
          },
          "per_page": {
            "type": "integer",
            "description": "The number of results per page"
          },
          "current_page": {
            "type": "integer",
            "description": "The current page number (first is 1)"
          },
          "total_pages": {
            "type": "integer",
            "description": "The total number of pages"
          },
          "links": {
            "type": "object",
            "properties": {
              "previous": {
                "type": "string",
                "description": "The URL to the previous page of results, if there is one",
                "format": "uri"
              },
              "next": {
                "type": "string",
                "description": "The URL to the next page of results, if there is one",
                "format": "uri"
              }
            }
          }
        },
        "description": "Pagination metadata for the response."
      },
      "Price": {
        "type": "object",
        "properties": {
          "exclVat": {
            "type": "number",
            "description": "Price excluding Value-Added Tax",
            "example": 31.364
          },
          "inclVat": {
            "type": "number",
            "description": "Price including Value-Added Tax",
            "readOnly": true,
            "example": 37.95
          }
        }
      }
    },
    "parameters": {
      "article_include": {
        "name": "include",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["mainArticle", "customFields"]
          }
        }
      },
      "article_group_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * customFields: Custom fields set for the article group(s).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["customFields"]
          }
        }
      },
      "article_main_group_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * customFields: Custom fields set for the article main group(s).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["customFields"]
          }
        }
      },
      "main_article_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * customFields: Custom fields set for the main article(s).",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["customFields"]
          }
        }
      },
      "article": {
        "name": "article",
        "in": "path",
        "description": "Article id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "language": {
        "name": "language",
        "in": "query",
        "description": "Language id or language ISO 639-1 code",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "warehouse": {
        "name": "warehouse",
        "in": "path",
        "description": "Warehouse id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "explanation_include": {
        "name": "include",
        "in": "query",
        "description": "Available Includes:\n * author: The author of the explanation.\n * menuItem: The explanation is part of a menu item.\n * menuItem.product: The product the menu item belongs to.\n * children: The explanation children.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["author", "menuItem", "menuItem.product", "children"]
          }
        }
      },
      "menu_item_include": {
        "name": "include",
        "in": "query",
        "description": "Available Includes:\n * product: The product the menu item belongs to.\n * parentMenuItem: The parent menu item of the menu item.\n * childMenuItems: The children of the menu item.\n * explanation: The explanation linked to this menu item.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "product",
              "parentMenuItem",
              "childMenuItems",
              "explanation",
              "explanation.children"
            ]
          }
        }
      },
      "product_include": {
        "name": "include",
        "in": "query",
        "description": "Available Includes:\n * contactPerson: The contact person for the product.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["contactPerson"]
          }
        }
      },
      "layout_type": {
        "name": "type",
        "in": "path",
        "description": "Layout id, layout type or print series name, can also use documenttypes:\n * incassomachtiging\n * offerte\n * relatie\n * voorraadbeheer\n * factuur\n * pakbon\n * order\n * abonnement\n * factuur_herinnering\n * factuur_herinnering2\n * factuur_incasso\n * klaarzetbon\n * inkoop_pakbon",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "layout_document": {
        "name": "document",
        "in": "path",
        "description": "The id of the document of {type}",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "offer_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * employee: Additional information about the employee that created the order.\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the offer, containing quantities, articles, descriptions, etc.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "customFields",
              "debtor",
              "employee",
              "lines",
              "lines.article",
              "lines.lineTotal",
              "lines.unitPrice"
            ]
          }
        }
      },
      "order_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "prePaidTotalAmount",
              "orderSources",
              "debtor",
              "employee",
              "project",
              "invoicingCondition",
              "lines"
            ]
          }
        }
      },
      "orderPayment_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes for Response:\n * order: The order that the payment was made on.\n * paymentMethod: Additional information about the payment method used.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["order", "paymentMethod"]
          }
        }
      },
      "order_get_include": {
        "name": "include",
        "in": "query",
        "description": "Default includes:\n * debtor: Additional information about the debtor of the order, such as company name, VAT code and contact persons.\n * lines: The lines of the order, containing quantities, articles, descriptions, etc.\n\nAvailable includes:\n * prePaidTotalAmount: The total amount pre-paid (deposit) specifically for this order (payments from invoices aren't included).\n * orderSources: The known order sources (identifiers associated with this order in other systems).\n * employee: Additional information about the employee that created the order.\n * invoicingCondition: The conditions under which the order can be invoiced.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "prePaidTotalAmount",
              "orderSources",
              "employee",
              "project",
              "invoicingCondition",
              "lines.article",
              "lines.lineTotal",
              "lines.unitPrice"
            ]
          }
        }
      },
      "packing_slip_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * debtor: Additional information about the debtor of the packing slip, such as company name, VAT code and contact persons.\n * employee: Additional information about the employee that created the packing slip.\n * lines: The lines of the packing slip, containing quantities, order lines, unites, etc.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["debtor", "employee", "lines.orderLine", "order"]
          }
        }
      },
      "project_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "attachments",
              "contactPerson",
              "customFields",
              "events",
              "labels",
              "mainTask",
              "orders",
              "parentTicket",
              "primaryLabel",
              "relation",
              "tasks",
              "customFields",
              "customFieldTypes"
            ]
          }
        }
      },
      "purchase_invoice_includes": {
        "name": "include",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "lines",
              "lines.receiptLineAssignments",
              "lines.suppliers",
              "lines.purchaseOrderLines",
              "lines.hasAssignments",
              "lines.packingSlipNumber",
              "suppliers",
              "totalPrice",
              "purchaseOrders",
              "assignments",
              "attachments"
            ]
          }
        }
      },
      "purchase_order_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes:\n * supplier: The relation that will be fulfilling the purchase order.\n * lines: The individual lines on the purchase order.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["supplier", "lines"]
          }
        }
      },
      "purchase_receipt_include": {
        "name": "include",
        "in": "query",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "deliveryMethod",
              "lines",
              "lines.article",
              "lines.comment",
              "lines.unit",
              "lines.warehouse",
              "purchaseOrderNumbers",
              "supplier"
            ]
          }
        }
      },
      "iban": {
        "name": "iban",
        "in": "path",
        "description": "IBAN id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "mandate": {
        "name": "mandate",
        "in": "path",
        "description": "Direct debit mandate id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "priceAgreement": {
        "name": "priceAgreement",
        "in": "path",
        "description": "Price agreement id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "relation_include": {
        "name": "include",
        "in": "query",
        "description": "available includes:\n * outstandingDeposits: an array of quantities/articles that the relation has outstanding deposits for, based on order lines (POS orders are currently not supported.)\n * status: An object containing various boolean status flags for the relation. Currently available: 'active', 'verified' and 'defunct'.\n * updated_after: Only show relations that are updated after the given date.\n * include_hidden: Include hidden relations (soft deleted).\n * deliveryAddress: Show the delivery address of the relation.\n * contactAddress: Show the contact address of the relation.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "outstandingDeposits",
              "status",
              "updated_after",
              "include_hidden",
              "deliveryAddress",
              "contactAddress"
            ]
          }
        }
      },
      "start_date": {
        "name": "start_date",
        "in": "query",
        "description": "The starting date (inclusive) from which to calculate revenue. When no date is given, start from the earliest order for this Relation.",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "end_date": {
        "name": "end_date",
        "in": "query",
        "description": "The ending date (inclusive) until which to calculate revenue. When no date is given, end with the latest order for this Relation.",
        "schema": {
          "type": "string",
          "format": "date"
        }
      },
      "include_draft_orders": {
        "name": "include_draft_orders",
        "in": "query",
        "description": "Whether to include draft orders in the revenue calculation.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "schedule_entry_include": {
        "name": "include",
        "in": "query",
        "description": "Available includes",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["employee", "task", "planningPeriod"]
          }
        }
      },
      "transport_ride_include": {
        "name": "include",
        "in": "query",
        "description": "Default includes:\n * palletCount\n * weight\n\nAvailable includes:\n * driver\n * items\n * vehicle",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["driver", "items", "vehicle"]
          }
        }
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "description": "Number of results to return per page (default 100, min 1, max 1000)",
        "schema": {
          "type": "integer"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Which page of results to request; first is 1",
        "schema": {
          "type": "integer"
        }
      },
      "relation": {
        "name": "relation",
        "in": "path",
        "description": "Relation id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "contactperson": {
        "name": "contactperson",
        "in": "path",
        "description": "ContactPerson id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "address": {
        "name": "address",
        "in": "path",
        "description": "Address id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "choicelist": {
        "name": "choicelist",
        "in": "path",
        "description": "Attribute choicelist id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "article_group": {
        "name": "article_group",
        "in": "path",
        "description": "Article group ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "article_main_group": {
        "name": "article_main_group",
        "in": "path",
        "description": "Article main group ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "main_article": {
        "name": "main_article",
        "in": "path",
        "description": "Main article ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "order": {
        "name": "order",
        "in": "path",
        "description": "Order id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "project": {
        "name": "project",
        "in": "path",
        "description": "Project ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "purchase_invoice": {
        "name": "purchase_invoice",
        "in": "path",
        "description": "Purchase invoice ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "purchase_order": {
        "name": "purchase_order",
        "in": "path",
        "description": "Purchase Order id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "purchase_receipt": {
        "name": "purchase_receipt",
        "in": "path",
        "description": "Purchase receipt id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "asset": {
        "name": "asset",
        "in": "path",
        "description": "Asset ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "asset_class": {
        "name": "asset_class",
        "in": "path",
        "description": "Asset class ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "asset_custom_field": {
        "name": "asset_custom_field",
        "in": "path",
        "description": "Asset custom field ID",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "offer": {
        "name": "offer",
        "in": "path",
        "description": "Offer id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "transport_ride": {
        "name": "transport_ride",
        "in": "path",
        "description": "Transport ride id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "explanation": {
        "name": "explanation",
        "in": "path",
        "description": "Knowledge explanation id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "ticketing_schedule_entry": {
        "name": "ticketing_schedule_entry",
        "in": "path",
        "description": "Ticketing schedule entry id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "description": "Basic HTTP Authentication",
        "scheme": "basic"
      },
      "CompanyKey": {
        "type": "apiKey",
        "description": "Company name of administration",
        "name": "Company",
        "in": "header"
      }
    }
  }
}
